"use strict";(self.webpackChunkvblog=self.webpackChunkvblog||[]).push([[144],{7074:(n,s,a)=>{a.r(s),a.d(s,{data:()=>e});const e={key:"v-25281048",path:"/base/base/configuration.html",title:"常用配置",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"software collections",slug:"software-collections",children:[]},{level:2,title:"sudo",slug:"sudo",children:[]},{level:2,title:"自签名证书",slug:"自签名证书",children:[{level:3,title:"生成私钥",slug:"生成私钥",children:[]},{level:3,title:"生成 CSR（证书签名请求）",slug:"生成-csr-证书签名请求",children:[]},{level:3,title:"删除私钥中的密码",slug:"删除私钥中的密码",children:[]},{level:3,title:"生成自签名证书(RootCA)",slug:"生成自签名证书-rootca",children:[]},{level:3,title:"生成证书链",slug:"生成证书链",children:[]}]},{level:2,title:"openssl 对称加密",slug:"openssl-对称加密",children:[]},{level:2,title:"openssl 非对称加密解密",slug:"openssl-非对称加密解密",children:[{level:3,title:"smime",slug:"smime",children:[]}]},{level:2,title:"p12 格式",slug:"p12-格式",children:[]},{level:2,title:"Docker",slug:"docker",children:[]},{level:2,title:"Jenkins",slug:"jenkins",children:[]},{level:2,title:"Fiddler",slug:"fiddler",children:[{level:3,title:"内置命令",slug:"内置命令",children:[]}]},{level:2,title:"远程调试",slug:"远程调试",children:[]},{level:2,title:"Firewalld",slug:"firewalld",children:[]},{level:2,title:"JDK 环境变量",slug:"jdk-环境变量",children:[]},{level:2,title:"Gradle",slug:"gradle",children:[]},{level:2,title:"jira 配置",slug:"jira-配置",children:[]}],filePathRelative:"base/base/configuration.md",git:{updatedTime:1639984814e3,contributors:[{name:"bootvue",email:"bootvue@gmail.com",commits:1}]}}},8973:(n,s,a)=>{a.r(s),a.d(s,{default:()=>d});var e=a(6252);const p=(0,e._)("h1",{id:"常用配置",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#常用配置","aria-hidden":"true"},"#"),(0,e.Uk)(" 常用配置")],-1),l=(0,e._)("p",null,"常用配置",-1),t=(0,e._)("h2",{id:"software-collections",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#software-collections","aria-hidden":"true"},"#"),(0,e.Uk)(" software collections")],-1),c=(0,e.Uk)("devtools-7 "),r={href:"https://www.softwarecollections.org",target:"_blank",rel:"noopener noreferrer"},o=(0,e.Uk)("网站"),i=(0,e.uE)('<div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token comment"># 1. Install a package with repository for your system:</span>\n<span class="token comment"># On CentOS, install package centos-release-scl available in CentOS repository:</span>\n$ <span class="token function">sudo</span> yum <span class="token function">install</span> centos-release-scl\n\n<span class="token comment"># On RHEL, enable RHSCL repository for you system:</span>\n$ <span class="token function">sudo</span> yum-config-manager --enable rhel-server-rhscl-7-rpms\n\n<span class="token comment"># 2. Install the collection:</span>\n$ <span class="token function">sudo</span> yum <span class="token function">install</span> devtoolset-7\n\n<span class="token comment"># 3. Start using software collections:</span>\n$ scl <span class="token builtin class-name">enable</span> devtoolset-7 <span class="token function">bash</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h2 id="sudo" tabindex="-1"><a class="header-anchor" href="#sudo" aria-hidden="true">#</a> sudo</h2><blockquote><p>免输密码 /etc/sudoers.d/sudoers battery ALL=(ALL) NOPASSWD : ALL</p></blockquote><h2 id="自签名证书" tabindex="-1"><a class="header-anchor" href="#自签名证书" aria-hidden="true">#</a> 自签名证书</h2>',4),u={href:"https://www.cnblogs.com/hnxxcxg/p/7610582.html",target:"_blank",rel:"noopener noreferrer"},b=(0,e.Uk)("原文"),m=(0,e.uE)('<p>X.509 证书包含三个文件：key，csr，crt</p><ul><li>key 是服务器上的私钥文件，用于对发送给客户端数据的加密，以及对从客户端接收到数据的解密</li><li>csr 是证书签名请求文件，用于提交给证书颁发机构（CA）对证书签名</li><li>crt 是由证书颁发机构（CA）签名后的证书，或者是开发者自签名的证书，包含证书持有人的信息，持有人的公钥，以及签署者的签名等信息</li></ul><blockquote><p>备注：在密码学中，X.509 是一个标准，规范了公开秘钥认证、证书吊销列表、授权凭证、凭证路径验证算法等</p></blockquote><h3 id="生成私钥" tabindex="-1"><a class="header-anchor" href="#生成私钥" aria-hidden="true">#</a> 生成私钥</h3><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code> openssl genrsa -des3 -out private.key <span class="token number">2048</span>\n <span class="token comment"># des|-des3|-idea</span>\n<span class="token comment"># 默认1024位 最好2048以上</span>\n<span class="token comment">#-des            encrypt the generated key with DES in cbc mode</span>\n<span class="token comment"># -des3           encrypt the generated key with DES in ede cbc mode (168 bit key)</span>\n<span class="token comment"># -idea           encrypt the generated key with IDEA in cbc mode</span>\n<span class="token comment"># -seed</span>\n<span class="token comment">#                 encrypt PEM output with cbc seed</span>\n<span class="token comment"># -aes128, -aes192, -aes256</span>\n<span class="token comment">#                 encrypt PEM output with cbc aes</span>\n<span class="token comment"># -camellia128, -camellia192, -camellia256</span>\n<span class="token comment">#                 encrypt PEM output with cbc camellia</span>\n<span class="token comment"># -out file       output the key to &#39;file</span>\n<span class="token comment"># -passout arg    output file pass phrase source</span>\n<span class="token comment"># -f4             use F4 (0x10001) for the E value</span>\n<span class="token comment"># -3              use 3 for the E value</span>\n<span class="token comment"># -engine e       use engine e, possibly a hardware device.</span>\n<span class="token comment"># -rand file:file:...</span>\n<span class="token comment">#                 load the file (or the files in the directory) into</span>\n<span class="token comment">#                 the random number generator</span>\n<span class="token comment">#</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><h3 id="生成-csr-证书签名请求" tabindex="-1"><a class="header-anchor" href="#生成-csr-证书签名请求" aria-hidden="true">#</a> 生成 CSR（证书签名请求）</h3><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code> openssl req -new -key private.key -out server.csr -config openssl.cfg\n <span class="token comment"># config默认--/etc/ssl/openssl.cnf</span>\n<span class="token comment">#  [new/x509]</span>\n<span class="token comment">#</span>\n<span class="token comment"># 当使用-new选取的时候，说明是要生成证书请求，当使用x509选项的时候，说明是要生成自签名证书</span>\n<span class="token comment">#</span>\n<span class="token comment"># [/key/newkey/keyout]</span>\n<span class="token comment">#</span>\n<span class="token comment"># key和newkey是互斥的，key是指定已有的密钥文件，而newkey是指在生成证书请求或者自签名证书的时候自动生成密钥，然后生成的密钥名称有keyout参数指定。</span>\n<span class="token comment">#</span>\n<span class="token comment"># 当指定newkey选项时，后面指定rsa:bits说明产生rsa密钥，位数由bits指定。指定dsa:file说明产生dsa密钥，file是指生成dsa密钥的参数文件(由dsaparam生成)</span>\n<span class="token comment">#</span>\n<span class="token comment"># [in/out/inform/outform/keyform]</span>\n<span class="token comment">#</span>\n<span class="token comment"># in选项指定证书请求文件，当查看证书请求内容或者生成自签名证书的时候使用</span>\n<span class="token comment">#</span>\n<span class="token comment"># out选项指定证书请求或者自签名证书文件名，或者公钥文件名(当使用pubkey选项时用到)，以及其他一些输出信息。</span>\n<span class="token comment">#</span>\n<span class="token comment"># inform、outform、keyform分别指定了in、out、key选项指定的文件格式，默认是PEM格式。</span>\n<span class="token comment"># -batch 从配置文件读取主体信息，或者配合-subj来指定主体信息</span>\n<span class="token comment"># -nodes 秘钥文件不用口令加密</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><h3 id="删除私钥中的密码" tabindex="-1"><a class="header-anchor" href="#删除私钥中的密码" aria-hidden="true">#</a> 删除私钥中的密码</h3><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>openssl rsa -in private.key -out private.key\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="生成自签名证书-rootca" tabindex="-1"><a class="header-anchor" href="#生成自签名证书-rootca" aria-hidden="true">#</a> 生成自签名证书(RootCA)</h3><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>openssl req -x509 -days <span class="token number">3650</span> -in server.csr -key private.key -out server.crt\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="生成证书链" tabindex="-1"><a class="header-anchor" href="#生成证书链" aria-hidden="true">#</a> 生成证书链</h3><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">rm</span> -rf /etc/pki/CA/*.old\n<span class="token function">touch</span> /etc/pki/CA/index.txt\n\n<span class="token function">touch</span> /etc/pki/CA/index.txt.attr\n<span class="token builtin class-name">echo</span> <span class="token string">&quot;unique_subject = no&quot;</span> <span class="token operator">&gt;</span> index.txt.attr\n\n<span class="token builtin class-name">echo</span> 01 <span class="token operator">&gt;</span> /etc/pki/CA/serial\n<span class="token builtin class-name">echo</span> 02 <span class="token operator">&gt;</span> /etc/pki/CA/serial\n\n<span class="token comment"># 二级证书 chain</span>\nopenssl ca -extensions v3_ca -in server.csr -days <span class="token number">3650</span> -out chain.crt -cert server.crt -keyfile private.key\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h2 id="openssl-对称加密" tabindex="-1"><a class="header-anchor" href="#openssl-对称加密" aria-hidden="true">#</a> openssl 对称加密</h2><blockquote><p>基于 key iv salt 的加密解密</p></blockquote><h2 id="openssl-非对称加密解密" tabindex="-1"><a class="header-anchor" href="#openssl-非对称加密解密" aria-hidden="true">#</a> openssl 非对称加密解密</h2><blockquote><p>密钥对,公钥加密/私钥解密 私钥签名/公钥验证</p></blockquote><ul><li>生成私钥: openssl genrsa .....</li><li>提取公钥: openssl rsa -in rsa_private_key.pem -pubout -out rsa_public_key.pem</li></ul><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token comment">#公钥加密</span>\nopenssl rsautl -encrypt -in readme.txt -inkey rsa_public_key.pem -pubin -out hello.en\n<span class="token comment">#私钥解密</span>\nopenssl rsautl -decrypt -in hello.en -inkey rsa_private_key.pem -out hello.de\n<span class="token comment"># -in file        input file</span>\n<span class="token comment"># -out file       output file</span>\n<span class="token comment"># -inkey file     input key</span>\n<span class="token comment"># -keyform arg    private key format - default PEM</span>\n<span class="token comment"># -pubin          input is an RSA public</span>\n<span class="token comment"># -certin         input is a certificate carrying an RSA public key</span>\n<span class="token comment"># -ssl            use SSL v2 padding</span>\n<span class="token comment"># -raw            use no padding</span>\n<span class="token comment"># -pkcs           use PKCS#1 v1.5 padding (default)</span>\n<span class="token comment"># -oaep           use PKCS#1 OAEP</span>\n<span class="token comment"># -sign           sign with private key</span>\n<span class="token comment"># -verify         verify with public key</span>\n<span class="token comment"># -encrypt        encrypt with public key</span>\n<span class="token comment"># -decrypt        decrypt with private key</span>\n<span class="token comment"># -hexdump        hex dump output</span>\n<span class="token comment"># -engine e       use engine e, possibly a hardware device.</span>\n<span class="token comment"># -passin arg    pass phrase source</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><h3 id="smime" tabindex="-1"><a class="header-anchor" href="#smime" aria-hidden="true">#</a> smime</h3><blockquote><p>主要用于邮件协议</p></blockquote><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token comment"># 签名</span>\nopenssl smime -sign -in company.mobileconfig -out signed.mobileconfig -signer server.crt -inkey server.key -certfile cert-chain.crt -outform der -nodetach\n<span class="token comment"># 验证</span>\nopenssl smime -verify -in signed.mobileconfig -inform der -certfile chain.crt -CAfile server.crt\n\n<span class="token comment"># -encrypt：用给定的接受者的证书加密邮件信息。输入文件是一个消息值，用于加密。输出文件是一个已经被加密了的MIME格式的邮件信息。</span>\n<span class="token comment">#</span>\n<span class="token comment"># -decrypt：用提供的证书和私钥值来解密邮件信息值。从输入文件中获取到已经加密了的MIME格式的邮件信息值。解密的邮件信息值被保存到输出文件中。</span>\n<span class="token comment">#</span>\n<span class="token comment"># -sign：用提供的证书和私钥值来签名邮件信息值。输入文件是一个消息值，用于签名。输出文件是一个已经被签名了的MIME格式的邮件信息。</span>\n<span class="token comment">#</span>\n<span class="token comment"># -verify：验证已经签名了的邮件信息值。输入文件和输出文件都是已经签名了的邮件信息值。同时支持清除文本以及不透明的签名。</span>\n<span class="token comment">#</span>\n<span class="token comment"># -pk7out：将一个PEM格式的输入信息转换为PKCS#7结构。</span>\n<span class="token comment">#</span>\n<span class="token comment"># -nointern：对签名者来说，不从消息中查找证书。</span>\n<span class="token comment">#</span>\n<span class="token comment"># -nosigs：不去验证签名值。</span>\n<span class="token comment">#</span>\n<span class="token comment"># -noverify：不去验证签名者的证书信息。</span>\n<span class="token comment">#</span>\n<span class="token comment"># -nocerts：当签名的时候不包含签名者的证书信息值。</span>\n<span class="token comment">#</span>\n<span class="token comment"># -nodetach：用不透明的签名。</span>\n<span class="token comment">#</span>\n<span class="token comment"># -binary：不转换二进制消息到文本消息值。</span>\n<span class="token comment">#</span>\n<span class="token comment"># -in file：输入消息值，它一般为加密了的以及签名了的MINME类型的消息值。</span>\n<span class="token comment">#</span>\n<span class="token comment"># -inform SMIME|PEM|DER：输入消息的格式。一般为SMIME|PEM|DER三种。默认的是SMIME。</span>\n<span class="token comment">#</span>\n<span class="token comment"># -certfile filename：添加filename中所有的证书信息值。</span>\n<span class="token comment">#</span>\n<span class="token comment"># -signer file：一个签名证书，当签名或放弃一个签名数据时使用。这个选项可以被用多次。如果一个消息已经被验证并验证通过，则将签名者的证书放到file中。</span>\n<span class="token comment">#</span>\n<span class="token comment"># -recip file：存放提供者的证书，主要用于解密消息值。这个证书必须匹配多个提供者的消息。</span>\n<span class="token comment">#</span>\n<span class="token comment"># -passin arg：私钥保护口令来源。</span>\n<span class="token comment">#</span>\n<span class="token comment"># -inkey file：私钥存放地址，主要用于签名或解密数据。这个私钥值必须匹配相应的证书信息。如果这个选项没有被指定，私钥必须包含到证书路径中（-recip、-signer）。</span>\n<span class="token comment">#</span>\n<span class="token comment"># -keyform PEM |ENGINE：私钥格式。一般为PEM 、ENGINE格式。</span>\n<span class="token comment">#</span>\n<span class="token comment"># -out file：已经被解密或验证通过的数据的保存位置。</span>\n<span class="token comment">#</span>\n<span class="token comment"># -outform SMIME|PEM|DER：输出格式。一般为SMIME、PEM、DER三种。默认的格式是SMIME。</span>\n<span class="token comment">#</span>\n<span class="token comment"># -content file：包含分离的上下文路径，它仅仅只能用于verify操作。</span>\n<span class="token comment">#</span>\n<span class="token comment"># -to addr：有关的邮件信息值头部。接收的地址。</span>\n<span class="token comment">#</span>\n<span class="token comment"># -from ad：有关的邮件信息值头部。发送的地址。</span>\n<span class="token comment">#</span>\n<span class="token comment"># -subject s：颁发者信息值。</span>\n<span class="token comment">#</span>\n<span class="token comment"># -text：打印出S/MIME邮件的各个部件。</span>\n<span class="token comment">#</span>\n<span class="token comment"># -CApath directory：设置信任CA文件所在路径，此路径中的ca文件名采用特殊的形式：xxx.0，其中xxx为CA证书持有者的哈希值，它通过x509 -hash命令获得。</span>\n<span class="token comment">#</span>\n<span class="token comment"># -CAfile filename：某文件，里面是所有你信任的CA的证书的内容。当你要建立client的证书链的时候也需要用到这个文件。</span>\n<span class="token comment">#</span>\n<span class="token comment"># -crl_check、-crl_check_all：检查客户端的证书是否在CA的废除列表中。CRL（s）在证书文件中。crl_check_all表示要检查所有的CA证书中的废除列表。</span>\n<span class="token comment">#</span>\n<span class="token comment"># -indef、-stream：这两个选项对I/O流进行编码操作。</span>\n<span class="token comment">#</span>\n<span class="token comment"># -noindef：不对数据进行编码操作。</span>\n<span class="token comment">#</span>\n<span class="token comment"># -md digest：当签名或放弃签名操作时用的摘要算法。默认的摘要算法为sha1。</span>\n<span class="token comment">#</span>\n<span class="token comment"># -rand file(s)：指定随机数种子文件，多个文件间用分隔符分开，windows用“;”，OpenVMS用“,“，其他系统用“：”。</span>\n<span class="token comment">#</span>\n<span class="token comment"># cert.pem：提供者的证书信息。</span>\n<span class="token comment">#</span>\n<span class="token comment"># -des, -des3, -seed, -rc2-40, -rc2-64, -rc2-128, -aes128, -aes192, -aes256，-camellia128, -camellia192, -camellia256：指定的私钥保护加密算法。默认的算法是rc2-40</span>\n\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br></div></div><h2 id="p12-格式" tabindex="-1"><a class="header-anchor" href="#p12-格式" aria-hidden="true">#</a> p12 格式</h2><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>openssl genrsa -out ios.key 2048\nopenssl req -new -sha256 -key ios.key -out ios.csr\n\nopenssl x509 -in ios_development.cer -inform DER -outform PEM -out ios_distribution.pem\nopenssl pkcs12 -export -inkey ios.key -in ios_distribution.pem -out ios_distribution.p12\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="docker" tabindex="-1"><a class="header-anchor" href="#docker" aria-hidden="true">#</a> Docker</h2><p>修改 docker 时区</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">cp</span> /usr/share/zoneinfo/Asia/Shanghai /etc/localtime\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h2 id="jenkins" tabindex="-1"><a class="header-anchor" href="#jenkins" aria-hidden="true">#</a> Jenkins</h2><p>shell 脚本保持状态, 加载环境变量:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token assign-left variable">BUILD_ID</span><span class="token operator">=</span>DONTKILLME\n<span class="token builtin class-name">.</span> /etc/profile\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="fiddler" tabindex="-1"><a class="header-anchor" href="#fiddler" aria-hidden="true">#</a> Fiddler</h2><p>显示 IP, 输出 websocket 日志:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>Main<span class="token punctuation">(</span><span class="token punctuation">)</span>: FiddlerObject.UI.lvSessions.AddBoundColumn<span class="token punctuation">(</span><span class="token string">&quot;ServerIP&quot;</span>, <span class="token number">120</span>, <span class="token string">&quot;X-HostIP&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nclass Handlers:\nstatic <span class="token keyword">function</span> OnWebSocketMessage<span class="token punctuation">(</span>oMsg: WebSocketMessage<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        // Log Message to the LOG tab\n        FiddlerApplication.Log.LogString<span class="token punctuation">(</span>oMsg.ToString<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="内置命令" tabindex="-1"><a class="header-anchor" href="#内置命令" aria-hidden="true">#</a> 内置命令</h3><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token number">1</span>. <span class="token keyword">select</span> xxx:  选择xxx类型的,  例如 <span class="token keyword">select</span> html , <span class="token keyword">select</span> image ,select video<span class="token punctuation">..</span><span class="token punctuation">..</span> , content-type的类型\n<span class="token number">2</span>. allbut xxxx: allbut image--<span class="token operator">&gt;</span>只选择图片类型的, 会把其它捕获都删除<span class="token operator">!</span><span class="token operator">!</span><span class="token operator">!</span><span class="token operator">!</span>\n<span class="token number">3</span>. ?xxx: 选择url中包含xxx的\n<span class="token number">4</span>. <span class="token punctuation">\\</span><span class="token operator">&gt;</span>size <span class="token operator">&lt;</span>size: 过滤响应内容大小, 只能写数字 <span class="token operator">&gt;</span><span class="token number">40000</span>   单位<span class="token punctuation">(</span>b<span class="token punctuation">)</span>\n<span class="token number">5</span>. @host: 请求url包含xxx的, 例如:  @oschina.net\n<span class="token number">6</span>. <span class="token operator">=</span>status: <span class="token operator">=</span><span class="token number">200</span> <span class="token operator">==</span><span class="token number">404</span> 过滤响应码\n<span class="token number">7</span>. Bpafter， Bps, bpv, bpm, bpu: 断点命令,  也可以在filters中设置\n   Bpafter xxx: 中断 URL 包含指定字符的全部 session 响应\n    Bps xxx: 中断 HTTP 响应状态为指定字符的全部 session 响应。\n    Bpv xxx: 中断指定请求方式的全部 session 响应\n    Bpm xxx: 中断指定请求方式的全部 session 响应。等同于bpv xxx\n    Bpu xxx:与bpafter类似。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h2 id="远程调试" tabindex="-1"><a class="header-anchor" href="#远程调试" aria-hidden="true">#</a> 远程调试</h2><ol><li><p>Tomcat <code>startup.sh</code> 开头</p><blockquote><p>declare -x CATALINA_OPTS=&quot;-server -Xdebug -Xnoagent -Djava.compiler=NONE -Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=3316&quot;</p></blockquote></li><li><p>Jar</p><blockquote><p>java -jar -Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=3316 xxx.jar</p></blockquote></li></ol><h2 id="firewalld" tabindex="-1"><a class="header-anchor" href="#firewalld" aria-hidden="true">#</a> Firewalld</h2><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>firewall-cmd --zone<span class="token operator">=</span>public --add-port<span class="token operator">=</span><span class="token number">80</span>-9000/tcp --permanent\n\nfirewall-cmd --zone<span class="token operator">=</span>public --remove-port<span class="token operator">=</span><span class="token number">80</span>/tcp --permanent\n\nfirewall-cmd --permanent --add-rich-rule<span class="token operator">=</span><span class="token string">&quot;rule family=&quot;</span>ipv4<span class="token string">&quot; source address=&quot;</span><span class="token number">1.1</span>.1.1<span class="token string">&quot; port protocol=&quot;</span>tcp<span class="token string">&quot; port=&quot;</span><span class="token number">8080</span><span class="token string">&quot; accept&quot;</span>\nfirewall-cmd --permanent --remove-rich-rule<span class="token operator">=</span><span class="token string">&quot;rule family=&quot;</span>ipv4<span class="token string">&quot; source address=&quot;</span><span class="token number">1.1</span>.1.1<span class="token string">&quot; port protocol=&quot;</span>tcp<span class="token string">&quot; port=&quot;</span><span class="token number">8080</span><span class="token string">&quot; accept&quot;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="jdk-环境变量" tabindex="-1"><a class="header-anchor" href="#jdk-环境变量" aria-hidden="true">#</a> JDK 环境变量</h2><p>Windows:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token assign-left variable">JAVA_HOME</span><span class="token operator">==</span>D:<span class="token punctuation">\\</span>dev<span class="token punctuation">\\</span>Java<span class="token punctuation">\\</span>jdk1.6.0_12<span class="token punctuation">\\</span>\n<span class="token assign-left variable">classpath</span><span class="token operator">==</span>.<span class="token punctuation">;</span>%JAVA_HOME%<span class="token punctuation">\\</span>lib<span class="token punctuation">;</span>%JAVA_HOME%<span class="token punctuation">\\</span>lib<span class="token punctuation">\\</span>tools.jar\n<span class="token assign-left variable">path</span><span class="token operator">==</span>%JAVA_HOME%<span class="token punctuation">\\</span>bin<span class="token punctuation">;</span>%JAVA_HOME%<span class="token punctuation">\\</span>jre<span class="token punctuation">\\</span>bin\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>Linux: /etc/profile</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token builtin class-name">export</span> <span class="token assign-left variable">JAVA_HOME</span><span class="token operator">=</span>/home/jdk1.8.0_152\n<span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token variable">$JAVA_HOME</span>/bin:<span class="token environment constant">$PATH</span>\n<span class="token builtin class-name">export</span> <span class="token assign-left variable">CLASSPATH</span><span class="token operator">=</span>.:<span class="token variable">$JAVA_HOME</span>/lib/dt.jar:<span class="token variable">$JAVA_HOME</span>/lib/tools.jar\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="gradle" tabindex="-1"><a class="header-anchor" href="#gradle" aria-hidden="true">#</a> Gradle</h2><p>gradle 任务: 往 nexus 发布 jar</p><div class="language-groovy ext-groovy line-numbers-mode"><pre class="language-groovy"><code><span class="token comment">//Maven仓库的URL</span>\n<span class="token keyword">def</span> MAVEN_REPO_RELEASE_URL<span class="token operator">=</span> <span class="token string">&#39;http://xxxx/nexus/content/repositories/releases/&#39;</span>\n<span class="token keyword">def</span> MAVEN_REPO_SNAPSHOT_URL<span class="token operator">=</span> <span class="token string">&#39;http://xxxxx/nexus/content/repositories/snapshots/&#39;</span>\n<span class="token comment">//登录nexus 的用户名</span>\n<span class="token keyword">def</span> NEXUS_USERNAME<span class="token operator">=</span><span class="token string">&#39;admin&#39;</span>\n<span class="token comment">//登录nexus 的密码</span>\n<span class="token keyword">def</span> NEXUS_PASSWORD<span class="token operator">=</span><span class="token string">&#39;admin&#39;</span>\n<span class="token keyword">def</span> ARTIFACT_ID <span class="token operator">=</span> <span class="token string">&#39;demo&#39;</span>\n<span class="token comment">// type</span>\n<span class="token keyword">def</span> TYPE <span class="token operator">=</span> <span class="token string">&#39;jar&#39;</span>\n<span class="token comment">//description</span>\n<span class="token keyword">def</span> DESCRIPTION <span class="token operator">=</span> <span class="token string">&#39;这里是描述&#39;</span>\n\nuploadArchives <span class="token punctuation">{</span>\n    configuration <span class="token operator">=</span> configurations<span class="token punctuation">.</span>archives\n    repositories <span class="token punctuation">{</span>\n        mavenDeployer <span class="token punctuation">{</span>\n            <span class="token function">snapshotRepository</span><span class="token punctuation">(</span>url<span class="token punctuation">:</span> MAVEN_REPO_SNAPSHOT_URL<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token function">authentication</span><span class="token punctuation">(</span>userName<span class="token punctuation">:</span> NEXUS_USERNAME<span class="token punctuation">,</span> password<span class="token punctuation">:</span> NEXUS_PASSWORD<span class="token punctuation">)</span>\n            <span class="token punctuation">}</span>\n            <span class="token function">repository</span><span class="token punctuation">(</span>url<span class="token punctuation">:</span> MAVEN_REPO_RELEASE_URL<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token function">authentication</span><span class="token punctuation">(</span>userName<span class="token punctuation">:</span> NEXUS_USERNAME<span class="token punctuation">,</span> password<span class="token punctuation">:</span> NEXUS_PASSWORD<span class="token punctuation">)</span>\n            <span class="token punctuation">}</span>\n            <span class="token function">repository</span><span class="token punctuation">(</span>url<span class="token punctuation">:</span> <span class="token function">uri</span><span class="token punctuation">(</span><span class="token string">&#39;C:\\\\Users\\\\dd\\\\.m2\\\\repository&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//定义本地maven仓库的地址</span>\n            <span class="token function">repository</span><span class="token punctuation">(</span>url<span class="token punctuation">:</span> <span class="token function">uri</span><span class="token punctuation">(</span><span class="token string">&#39;C:\\\\Users\\\\dd\\\\.gradle\\\\caches\\\\modules-2\\\\files-2.1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//定义本地Gradle仓库的地址</span>\n            pom<span class="token punctuation">.</span>project <span class="token punctuation">{</span>\n                version version\n                artifactId ARTIFACT_ID\n                groupId group\n                packaging TYPE\n                description DESCRIPTION\n                licenses <span class="token punctuation">{</span>\n                    license <span class="token punctuation">{</span>\n                        name <span class="token string">&#39;The Apache Software License, Version 2.0&#39;</span>\n                        url <span class="token string">&#39;http://www.apache.org/licenses/LICENSE-2.0.txt&#39;</span>\n                        distribution <span class="token string">&#39;xxxxxx&#39;</span>\n                    <span class="token punctuation">}</span>\n                <span class="token punctuation">}</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br></div></div><h2 id="jira-配置" tabindex="-1"><a class="header-anchor" href="#jira-配置" aria-hidden="true">#</a> jira 配置</h2><p><code>setenv.sh</code></p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>JVM_SUPPORT_RECOMMENDED_ARGS:<span class="token operator">=</span><span class="token string">&quot;-Duser.timezone=Asia/Shanghai&quot;</span>\n\n<span class="token builtin class-name">export</span> <span class="token assign-left variable">CATALINA_OPTS</span><span class="token operator">=</span><span class="token string">&quot;-javaagent:/var/atlassian/application-data/jira/agent.jar <span class="token variable">${CATALINA_OPTS}</span>&quot;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p><code>confluence setenv.sh</code></p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token builtin class-name">export</span> <span class="token assign-left variable">CATALINA_OPTS</span><span class="token operator">=</span><span class="token string">&quot;-javaagent:/var/atlassian/application-data/confluence/agent.jar <span class="token variable">${CATALINA_OPTS}</span>&quot;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p><code>bitbucket _start-webapp.sh</code></p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token assign-left variable">JAVA_OPTS</span><span class="token operator">=</span><span class="token string">&quot;-javaagent:/var/atlassian/application-data/bitbucket/agent.jar -classpath <span class="token variable">$INST_DIR</span>/app <span class="token variable">$JAVA_OPTS</span> <span class="token variable">$BITBUCKET_ARGS</span> <span class="token variable">$JMX_OPTS</span> <span class="token variable">$JVM_REQUIRED_ARGS</span> <span class="token variable">$JVM_SUPPORT_RECOMMENDED_ARGS</span>&quot;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div>',54),k={},d=(0,a(3744).Z)(k,[["render",function(n,s){const a=(0,e.up)("OutboundLink");return(0,e.wg)(),(0,e.iD)(e.HY,null,[p,l,t,(0,e._)("p",null,[c,(0,e._)("a",r,[o,(0,e.Wm)(a)])]),i,(0,e._)("blockquote",null,[(0,e._)("p",null,[(0,e._)("a",u,[b,(0,e.Wm)(a)])])]),m],64)}]])},3744:(n,s)=>{s.Z=(n,s)=>{for(const[a,e]of s)n[a]=e;return n}}}]);