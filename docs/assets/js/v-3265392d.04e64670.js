"use strict";(self.webpackChunkvblog=self.webpackChunkvblog||[]).push([[10],{4500:(n,a,s)=>{s.r(a),s.d(a,{data:()=>e});const e={key:"v-3265392d",path:"/data/base/rabbit.html",title:"RabbitMQ",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"注意:",slug:"注意",children:[]},{level:2,title:"exchange 交换机",slug:"exchange-交换机",children:[]},{level:2,title:"message 消息",slug:"message-消息",children:[]},{level:2,title:"死信队列(特殊的 exchange)",slug:"死信队列-特殊的-exchange",children:[]},{level:2,title:"消费者",slug:"消费者",children:[]},{level:2,title:"监听器",slug:"监听器",children:[]},{level:2,title:"高可用",slug:"高可用",children:[]},{level:2,title:"插件",slug:"插件",children:[]}],filePathRelative:"data/base/rabbit.md",git:{updatedTime:1638863944e3,contributors:[{name:"bootvue",email:"bootvue@gmail.com",commits:1}]}}},1626:(n,a,s)=>{s.r(a),s.d(a,{default:()=>p});const e=(0,s(6252).uE)('<h1 id="rabbitmq" tabindex="-1"><a class="header-anchor" href="#rabbitmq" aria-hidden="true">#</a> RabbitMQ</h1><h2 id="注意" tabindex="-1"><a class="header-anchor" href="#注意" aria-hidden="true">#</a> 注意:</h2><ol><li>如果不指定 exchange, 默认走 amqp default exchange, ==routing-key==与==queue==名匹配一致投递</li></ol><h2 id="exchange-交换机" tabindex="-1"><a class="header-anchor" href="#exchange-交换机" aria-hidden="true">#</a> exchange 交换机</h2><ol><li>direct: ==routing-key==必须完全匹配</li><li>topic: ==routing-key==模糊匹配</li></ol><blockquote><p>#匹配多个词 *匹配一个词</p></blockquote><ol start="3"><li>fanout: ==不处==理 routing-key, exchange 与 queue 直接绑定</li></ol><h2 id="message-消息" tabindex="-1"><a class="header-anchor" href="#message-消息" aria-hidden="true">#</a> message 消息</h2><ol><li>可以携带 properties 属性</li><li>==mandotary===true, 发送端会监听到路由不到的消息, 即 returnCallback, =false 时, 路由不到的消息会被自动删除</li><li>发送端要处理==confirmCallback== ==returnCallback==, 配置里这两项必须设为 true</li><li></li></ol><h2 id="死信队列-特殊的-exchange" tabindex="-1"><a class="header-anchor" href="#死信队列-特殊的-exchange" aria-hidden="true">#</a> 死信队列(特殊的 exchange)</h2><ol><li>消息被 nack 并且 requeue=false</li><li>ttl 消息过期</li><li>队列达到最大长度</li></ol><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>私信: 就是普通的exchange--<span class="token operator">&gt;</span>queue绑定\n\n业务queue 添加额外的参数: x-dead-letter-exchange<span class="token operator">=</span>死信交换机\n\n这样业务queue上未消费的消息就路由到了私信交换机上\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="消费者" tabindex="-1"><a class="header-anchor" href="#消费者" aria-hidden="true">#</a> 消费者</h2><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Consumer</span> <span class="token punctuation">{</span>\n\n    <span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>bindings <span class="token operator">=</span> <span class="token annotation punctuation">@QueueBinding</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token annotation punctuation">@Queue</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;test.queue&quot;</span><span class="token punctuation">,</span> durable <span class="token operator">=</span> <span class="token string">&quot;true&quot;</span><span class="token punctuation">,</span> autoDelete <span class="token operator">=</span> <span class="token string">&quot;true&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n            exchange <span class="token operator">=</span> <span class="token annotation punctuation">@Exchange</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;test.exchange&quot;</span><span class="token punctuation">,</span> durable <span class="token operator">=</span> <span class="token string">&quot;true&quot;</span><span class="token punctuation">,</span> autoDelete <span class="token operator">=</span> <span class="token string">&quot;true&quot;</span><span class="token punctuation">,</span> type <span class="token operator">=</span> <span class="token string">&quot;topic&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n            key <span class="token operator">=</span> <span class="token string">&quot;test.#&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n    <span class="token annotation punctuation">@RabbitHandler</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token class-name">Message</span> message<span class="token punctuation">,</span> <span class="token class-name">Channel</span> channel<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> body <span class="token operator">=</span> message<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h2 id="监听器" tabindex="-1"><a class="header-anchor" href="#监听器" aria-hidden="true">#</a> 监听器</h2><ol><li>simpleMessageListenerContainer</li></ol><p>为队列添加监听事件</p><ol start="2"><li><p>messageListenerAdapter 消息适配器</p><p>处理方法 可以为每个队列指定不同的处理方法</p></li><li><p>messageConvert 消息转化器 java 对象与 message 对象互转</p></li></ol><h2 id="高可用" tabindex="-1"><a class="header-anchor" href="#高可用" aria-hidden="true">#</a> 高可用</h2><ol><li><p>镜像队列 : 配置 1 个 Master, 多个 Slaver</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code> <span class="token number">1</span>. master节点 /var/lib/rabbitmq/.erlang.cookie 拷贝到各个节点\n <span class="token number">2</span>. 启动服务 rabbitmq-server -detached\n <span class="token number">3</span>. 备用节点停止服务 rabbitmqctl stop_app\n <span class="token number">4</span>. 备用节点加入到主节点集群中 rabbitmqctl join_cluster rabbit@xxxx<span class="token punctuation">(</span>hosts名<span class="token punctuation">)</span>\n <span class="token number">5</span>. 备用节点启动 rabbitmqctl start_app\n <span class="token number">6</span>. 任意节点设置集群名 rabbitmqctl set_cluster_name xxxx\n <span class="token number">7</span>. 查看集群状态 rabbitmqctl cluster_status\n <span class="token number">8</span>. 配置镜像队列: rabbitmqctl set_policy ha-all <span class="token string">&quot;^&quot;</span> <span class="token string">&#39;{&quot;ha-mode&quot;:&quot;all}&#39;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div></li><li><p>haproxy: 负载均衡</p></li></ol><h2 id="插件" tabindex="-1"><a class="header-anchor" href="#插件" aria-hidden="true">#</a> 插件</h2><ol><li>延时插件<code>rabbitmq_delayed_message_exchange</code><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code> <span class="token number">1</span>. /usr/lib/rabbitmq/lib/rabbitmq_serverxxx/plugins\n <span class="token number">2</span>. rabbitmq-plugins <span class="token builtin class-name">enable</span> xxxx\n <span class="token number">3</span>. 声明一个x-delayed-type类型的exchange\n <span class="token number">4</span>. 发送消息时,消息headers需要指定x-delay<span class="token operator">=</span>xx毫秒\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div></li></ol>',22),t={},p=(0,s(3744).Z)(t,[["render",function(n,a){return e}]])},3744:(n,a)=>{a.Z=(n,a)=>{for(const[s,e]of a)n[s]=e;return n}}}]);