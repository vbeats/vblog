import{o as n,c as s,d as a}from"./app.8862131a.js";const e='{"title":"常用配置","description":"","frontmatter":{},"headers":[{"level":2,"title":"software collections","slug":"software-collections"},{"level":2,"title":"sudo","slug":"sudo"},{"level":2,"title":"自签名证书","slug":"自签名证书"},{"level":3,"title":"生成私钥","slug":"生成私钥"},{"level":3,"title":"生成 CSR（证书签名请求）","slug":"生成-csr（证书签名请求）"},{"level":3,"title":"删除私钥中的密码","slug":"删除私钥中的密码"},{"level":3,"title":"生成自签名证书(RootCA)","slug":"生成自签名证书-rootca"},{"level":3,"title":"生成证书链","slug":"生成证书链"},{"level":2,"title":"openssl 对称加密","slug":"openssl-对称加密"},{"level":2,"title":"openssl 非对称加密解密","slug":"openssl-非对称加密解密"},{"level":3,"title":"smime","slug":"smime"},{"level":2,"title":"p12 格式","slug":"p12-格式"},{"level":2,"title":"Docker","slug":"docker"},{"level":2,"title":"SnowFlake","slug":"snowflake"},{"level":2,"title":"Jenkins","slug":"jenkins"},{"level":2,"title":"Filder","slug":"filder"},{"level":3,"title":"内置命令","slug":"内置命令"},{"level":2,"title":"远程调试","slug":"远程调试"},{"level":2,"title":"Firewalld","slug":"firewalld"},{"level":2,"title":"JDK 环境变量","slug":"jdk-环境变量"}],"relativePath":"other/index.md","lastUpdated":1628043853610}',t={},p=a('<h1 id="常用配置"><a class="header-anchor" href="#常用配置" aria-hidden="true">#</a> 常用配置</h1><p>常用配置</p><h2 id="software-collections"><a class="header-anchor" href="#software-collections" aria-hidden="true">#</a> software collections</h2><p>devtools-7 <a href="https://www.softwarecollections.org" target="_blank" rel="noopener noreferrer">网站</a></p><div class="language-bash"><pre><code><span class="token comment"># 1. Install a package with repository for your system:</span>\n<span class="token comment"># On CentOS, install package centos-release-scl available in CentOS repository:</span>\n$ <span class="token function">sudo</span> yum <span class="token function">install</span> centos-release-scl\n\n<span class="token comment"># On RHEL, enable RHSCL repository for you system:</span>\n$ <span class="token function">sudo</span> yum-config-manager --enable rhel-server-rhscl-7-rpms\n\n<span class="token comment"># 2. Install the collection:</span>\n$ <span class="token function">sudo</span> yum <span class="token function">install</span> devtoolset-7\n\n<span class="token comment"># 3. Start using software collections:</span>\n$ scl <span class="token builtin class-name">enable</span> devtoolset-7 <span class="token function">bash</span>\n</code></pre></div><h2 id="sudo"><a class="header-anchor" href="#sudo" aria-hidden="true">#</a> sudo</h2><blockquote><p>免输密码 /etc/sudoers.d/sudoers battery ALL=(ALL) NOPASSWD : ALL</p></blockquote><h2 id="自签名证书"><a class="header-anchor" href="#自签名证书" aria-hidden="true">#</a> 自签名证书</h2><blockquote><p><a href="https://www.cnblogs.com/hnxxcxg/p/7610582.html" target="_blank" rel="noopener noreferrer">原文</a></p></blockquote><p>X.509 证书包含三个文件：key，csr，crt</p><ul><li>key 是服务器上的私钥文件，用于对发送给客户端数据的加密，以及对从客户端接收到数据的解密</li><li>csr 是证书签名请求文件，用于提交给证书颁发机构（CA）对证书签名</li><li>crt 是由证书颁发机构（CA）签名后的证书，或者是开发者自签名的证书，包含证书持有人的信息，持有人的公钥，以及签署者的签名等信息</li></ul><blockquote><p>备注：在密码学中，X.509 是一个标准，规范了公开秘钥认证、证书吊销列表、授权凭证、凭证路径验证算法等</p></blockquote><h3 id="生成私钥"><a class="header-anchor" href="#生成私钥" aria-hidden="true">#</a> 生成私钥</h3><div class="language-bash"><pre><code> openssl genrsa -des3 -out private.key <span class="token number">2048</span>\n <span class="token comment"># des|-des3|-idea</span>\n<span class="token comment"># 默认1024位 最好2048以上</span>\n<span class="token comment">#-des            encrypt the generated key with DES in cbc mode</span>\n<span class="token comment"># -des3           encrypt the generated key with DES in ede cbc mode (168 bit key)</span>\n<span class="token comment"># -idea           encrypt the generated key with IDEA in cbc mode</span>\n<span class="token comment"># -seed</span>\n<span class="token comment">#                 encrypt PEM output with cbc seed</span>\n<span class="token comment"># -aes128, -aes192, -aes256</span>\n<span class="token comment">#                 encrypt PEM output with cbc aes</span>\n<span class="token comment"># -camellia128, -camellia192, -camellia256</span>\n<span class="token comment">#                 encrypt PEM output with cbc camellia</span>\n<span class="token comment"># -out file       output the key to &#39;file</span>\n<span class="token comment"># -passout arg    output file pass phrase source</span>\n<span class="token comment"># -f4             use F4 (0x10001) for the E value</span>\n<span class="token comment"># -3              use 3 for the E value</span>\n<span class="token comment"># -engine e       use engine e, possibly a hardware device.</span>\n<span class="token comment"># -rand file:file:...</span>\n<span class="token comment">#                 load the file (or the files in the directory) into</span>\n<span class="token comment">#                 the random number generator</span>\n<span class="token comment">#</span>\n</code></pre></div><h3 id="生成-csr（证书签名请求）"><a class="header-anchor" href="#生成-csr（证书签名请求）" aria-hidden="true">#</a> 生成 CSR（证书签名请求）</h3><div class="language-bash"><pre><code> openssl req -new -key private.key -out server.csr -config openssl.cfg\n <span class="token comment"># config默认--/etc/ssl/openssl.cnf</span>\n<span class="token comment">#  [new/x509]</span>\n<span class="token comment">#</span>\n<span class="token comment"># 当使用-new选取的时候，说明是要生成证书请求，当使用x509选项的时候，说明是要生成自签名证书</span>\n<span class="token comment">#</span>\n<span class="token comment"># [/key/newkey/keyout]</span>\n<span class="token comment">#</span>\n<span class="token comment"># key和newkey是互斥的，key是指定已有的密钥文件，而newkey是指在生成证书请求或者自签名证书的时候自动生成密钥，然后生成的密钥名称有keyout参数指定。</span>\n<span class="token comment">#</span>\n<span class="token comment"># 当指定newkey选项时，后面指定rsa:bits说明产生rsa密钥，位数由bits指定。指定dsa:file说明产生dsa密钥，file是指生成dsa密钥的参数文件(由dsaparam生成)</span>\n<span class="token comment">#</span>\n<span class="token comment"># [in/out/inform/outform/keyform]</span>\n<span class="token comment">#</span>\n<span class="token comment"># in选项指定证书请求文件，当查看证书请求内容或者生成自签名证书的时候使用</span>\n<span class="token comment">#</span>\n<span class="token comment"># out选项指定证书请求或者自签名证书文件名，或者公钥文件名(当使用pubkey选项时用到)，以及其他一些输出信息。</span>\n<span class="token comment">#</span>\n<span class="token comment"># inform、outform、keyform分别指定了in、out、key选项指定的文件格式，默认是PEM格式。</span>\n<span class="token comment"># -batch 从配置文件读取主体信息，或者配合-subj来指定主体信息</span>\n<span class="token comment"># -nodes 秘钥文件不用口令加密</span>\n</code></pre></div><h3 id="删除私钥中的密码"><a class="header-anchor" href="#删除私钥中的密码" aria-hidden="true">#</a> 删除私钥中的密码</h3><div class="language-bash"><pre><code>openssl rsa -in private.key -out private.key\n</code></pre></div><h3 id="生成自签名证书-rootca"><a class="header-anchor" href="#生成自签名证书-rootca" aria-hidden="true">#</a> 生成自签名证书(RootCA)</h3><div class="language-bash"><pre><code>openssl req -x509 -days <span class="token number">3650</span> -in server.csr -key private.key -out server.crt\n</code></pre></div><h3 id="生成证书链"><a class="header-anchor" href="#生成证书链" aria-hidden="true">#</a> 生成证书链</h3><div class="language-bash"><pre><code><span class="token function">rm</span> -rf /etc/pki/CA/*.old\n<span class="token function">touch</span> /etc/pki/CA/index.txt\n\n<span class="token function">touch</span> /etc/pki/CA/index.txt.attr\n<span class="token builtin class-name">echo</span> <span class="token string">&quot;unique_subject = no&quot;</span> <span class="token operator">&gt;</span> index.txt.attr\n\n<span class="token builtin class-name">echo</span> 01 <span class="token operator">&gt;</span> /etc/pki/CA/serial\n<span class="token builtin class-name">echo</span> 02 <span class="token operator">&gt;</span> /etc/pki/CA/serial\n\n<span class="token comment"># 二级证书 chain</span>\nopenssl ca -extensions v3_ca -in server.csr -days <span class="token number">3650</span> -out chain.crt -cert server.crt -keyfile private.key\n\n</code></pre></div><h2 id="openssl-对称加密"><a class="header-anchor" href="#openssl-对称加密" aria-hidden="true">#</a> openssl 对称加密</h2><blockquote><p>基于 key iv salt 的加密解密</p></blockquote><h2 id="openssl-非对称加密解密"><a class="header-anchor" href="#openssl-非对称加密解密" aria-hidden="true">#</a> openssl 非对称加密解密</h2><blockquote><p>密钥对,公钥加密/私钥解密 私钥签名/公钥验证</p></blockquote><ul><li>生成私钥: openssl genrsa …</li><li>提取公钥: openssl rsa -in rsa_private_key.pem -pubout -out rsa_public_key.pem</li></ul><div class="language-bash"><pre><code><span class="token comment">#公钥加密</span>\nopenssl rsautl -encrypt -in readme.txt -inkey rsa_public_key.pem -pubin -out hello.en\n<span class="token comment">#私钥解密</span>\nopenssl rsautl -decrypt -in hello.en -inkey rsa_private_key.pem -out hello.de\n<span class="token comment"># -in file        input file</span>\n<span class="token comment"># -out file       output file</span>\n<span class="token comment"># -inkey file     input key</span>\n<span class="token comment"># -keyform arg    private key format - default PEM</span>\n<span class="token comment"># -pubin          input is an RSA public</span>\n<span class="token comment"># -certin         input is a certificate carrying an RSA public key</span>\n<span class="token comment"># -ssl            use SSL v2 padding</span>\n<span class="token comment"># -raw            use no padding</span>\n<span class="token comment"># -pkcs           use PKCS#1 v1.5 padding (default)</span>\n<span class="token comment"># -oaep           use PKCS#1 OAEP</span>\n<span class="token comment"># -sign           sign with private key</span>\n<span class="token comment"># -verify         verify with public key</span>\n<span class="token comment"># -encrypt        encrypt with public key</span>\n<span class="token comment"># -decrypt        decrypt with private key</span>\n<span class="token comment"># -hexdump        hex dump output</span>\n<span class="token comment"># -engine e       use engine e, possibly a hardware device.</span>\n<span class="token comment"># -passin arg    pass phrase source</span>\n</code></pre></div><h3 id="smime"><a class="header-anchor" href="#smime" aria-hidden="true">#</a> smime</h3><blockquote><p>主要用于邮件协议</p></blockquote><div class="language-bash"><pre><code><span class="token comment"># 签名</span>\nopenssl smime -sign -in company.mobileconfig -out signed.mobileconfig -signer server.crt -inkey server.key -certfile cert-chain.crt -outform der -nodetach\n<span class="token comment"># 验证</span>\nopenssl smime -verify -in signed.mobileconfig -inform der -certfile chain.crt -CAfile server.crt\n\n<span class="token comment"># -encrypt：用给定的接受者的证书加密邮件信息。输入文件是一个消息值，用于加密。输出文件是一个已经被加密了的MIME格式的邮件信息。</span>\n<span class="token comment">#</span>\n<span class="token comment"># -decrypt：用提供的证书和私钥值来解密邮件信息值。从输入文件中获取到已经加密了的MIME格式的邮件信息值。解密的邮件信息值被保存到输出文件中。</span>\n<span class="token comment">#</span>\n<span class="token comment"># -sign：用提供的证书和私钥值来签名邮件信息值。输入文件是一个消息值，用于签名。输出文件是一个已经被签名了的MIME格式的邮件信息。</span>\n<span class="token comment">#</span>\n<span class="token comment"># -verify：验证已经签名了的邮件信息值。输入文件和输出文件都是已经签名了的邮件信息值。同时支持清除文本以及不透明的签名。</span>\n<span class="token comment">#</span>\n<span class="token comment"># -pk7out：将一个PEM格式的输入信息转换为PKCS#7结构。</span>\n<span class="token comment">#</span>\n<span class="token comment"># -nointern：对签名者来说，不从消息中查找证书。</span>\n<span class="token comment">#</span>\n<span class="token comment"># -nosigs：不去验证签名值。</span>\n<span class="token comment">#</span>\n<span class="token comment"># -noverify：不去验证签名者的证书信息。</span>\n<span class="token comment">#</span>\n<span class="token comment"># -nocerts：当签名的时候不包含签名者的证书信息值。</span>\n<span class="token comment">#</span>\n<span class="token comment"># -nodetach：用不透明的签名。</span>\n<span class="token comment">#</span>\n<span class="token comment"># -binary：不转换二进制消息到文本消息值。</span>\n<span class="token comment">#</span>\n<span class="token comment"># -in file：输入消息值，它一般为加密了的以及签名了的MINME类型的消息值。</span>\n<span class="token comment">#</span>\n<span class="token comment"># -inform SMIME|PEM|DER：输入消息的格式。一般为SMIME|PEM|DER三种。默认的是SMIME。</span>\n<span class="token comment">#</span>\n<span class="token comment"># -certfile filename：添加filename中所有的证书信息值。</span>\n<span class="token comment">#</span>\n<span class="token comment"># -signer file：一个签名证书，当签名或放弃一个签名数据时使用。这个选项可以被用多次。如果一个消息已经被验证并验证通过，则将签名者的证书放到file中。</span>\n<span class="token comment">#</span>\n<span class="token comment"># -recip file：存放提供者的证书，主要用于解密消息值。这个证书必须匹配多个提供者的消息。</span>\n<span class="token comment">#</span>\n<span class="token comment"># -passin arg：私钥保护口令来源。</span>\n<span class="token comment">#</span>\n<span class="token comment"># -inkey file：私钥存放地址，主要用于签名或解密数据。这个私钥值必须匹配相应的证书信息。如果这个选项没有被指定，私钥必须包含到证书路径中（-recip、-signer）。</span>\n<span class="token comment">#</span>\n<span class="token comment"># -keyform PEM |ENGINE：私钥格式。一般为PEM 、ENGINE格式。</span>\n<span class="token comment">#</span>\n<span class="token comment"># -out file：已经被解密或验证通过的数据的保存位置。</span>\n<span class="token comment">#</span>\n<span class="token comment"># -outform SMIME|PEM|DER：输出格式。一般为SMIME、PEM、DER三种。默认的格式是SMIME。</span>\n<span class="token comment">#</span>\n<span class="token comment"># -content file：包含分离的上下文路径，它仅仅只能用于verify操作。</span>\n<span class="token comment">#</span>\n<span class="token comment"># -to addr：有关的邮件信息值头部。接收的地址。</span>\n<span class="token comment">#</span>\n<span class="token comment"># -from ad：有关的邮件信息值头部。发送的地址。</span>\n<span class="token comment">#</span>\n<span class="token comment"># -subject s：颁发者信息值。</span>\n<span class="token comment">#</span>\n<span class="token comment"># -text：打印出S/MIME邮件的各个部件。</span>\n<span class="token comment">#</span>\n<span class="token comment"># -CApath directory：设置信任CA文件所在路径，此路径中的ca文件名采用特殊的形式：xxx.0，其中xxx为CA证书持有者的哈希值，它通过x509 -hash命令获得。</span>\n<span class="token comment">#</span>\n<span class="token comment"># -CAfile filename：某文件，里面是所有你信任的CA的证书的内容。当你要建立client的证书链的时候也需要用到这个文件。</span>\n<span class="token comment">#</span>\n<span class="token comment"># -crl_check、-crl_check_all：检查客户端的证书是否在CA的废除列表中。CRL（s）在证书文件中。crl_check_all表示要检查所有的CA证书中的废除列表。</span>\n<span class="token comment">#</span>\n<span class="token comment"># -indef、-stream：这两个选项对I/O流进行编码操作。</span>\n<span class="token comment">#</span>\n<span class="token comment"># -noindef：不对数据进行编码操作。</span>\n<span class="token comment">#</span>\n<span class="token comment"># -md digest：当签名或放弃签名操作时用的摘要算法。默认的摘要算法为sha1。</span>\n<span class="token comment">#</span>\n<span class="token comment"># -rand file(s)：指定随机数种子文件，多个文件间用分隔符分开，windows用“;”，OpenVMS用“,“，其他系统用“：”。</span>\n<span class="token comment">#</span>\n<span class="token comment"># cert.pem：提供者的证书信息。</span>\n<span class="token comment">#</span>\n<span class="token comment"># -des, -des3, -seed, -rc2-40, -rc2-64, -rc2-128, -aes128, -aes192, -aes256，-camellia128, -camellia192, -camellia256：指定的私钥保护加密算法。默认的算法是rc2-40</span>\n\n\n</code></pre></div><h2 id="p12-格式"><a class="header-anchor" href="#p12-格式" aria-hidden="true">#</a> p12 格式</h2><div class="language-"><pre><code>openssl genrsa -out ios.key 2048\nopenssl req -new -sha256 -key ios.key -out ios.csr\n\nopenssl x509 -in ios_development.cer -inform DER -outform PEM -out ios_distribution.pem\nopenssl pkcs12 -export -inkey ios.key -in ios_distribution.pem -out ios_distribution.p12\n</code></pre></div><h2 id="docker"><a class="header-anchor" href="#docker" aria-hidden="true">#</a> Docker</h2><p>修改 docker 时区</p><div class="language-bash"><pre><code><span class="token function">cp</span> /usr/share/zoneinfo/Asia/Shanghai /etc/localtime\n</code></pre></div><h2 id="snowflake"><a class="header-anchor" href="#snowflake" aria-hidden="true">#</a> SnowFlake</h2><p>摘自: <a href="https://www.cnblogs.com/relucent/p/4955340.html" target="_blank" rel="noopener noreferrer">cnblogs</a></p><p>分布式场景下 (workerId, datacenterId)保证唯一</p><div class="language-java"><pre><code><span class="token comment">/**\n * Twitter_Snowflake&lt;br&gt;\n * SnowFlake的结构如下(每部分用-分开):&lt;br&gt;\n * 0 - 0000000000 0000000000 0000000000 0000000000 0 - 00000 - 00000 - 000000000000 &lt;br&gt;\n * 1位标识，由于long基本类型在Java中是带符号的，最高位是符号位，正数是0，负数是1，所以id一般是正数，最高位是0&lt;br&gt;\n * 41位时间截(毫秒级)，注意，41位时间截不是存储当前时间的时间截，而是存储时间截的差值（当前时间截 - 开始时间截)\n * 得到的值），这里的的开始时间截，一般是我们的id生成器开始使用的时间，由我们程序来指定的（如下下面程序IdWorker类的startTime属性）。41位的时间截，可以使用69年，年T = (1L &lt;&lt; 41) / (1000L * 60 * 60 * 24 * 365) = 69&lt;br&gt;\n * 10位的数据机器位，可以部署在1024个节点，包括5位datacenterId和5位workerId&lt;br&gt;\n * 12位序列，毫秒内的计数，12位的计数顺序号支持每个节点每毫秒(同一机器，同一时间截)产生4096个ID序号&lt;br&gt;\n * 加起来刚好64位，为一个Long型。&lt;br&gt;\n * SnowFlake的优点是，整体上按照时间自增排序，并且整个分布式系统内不会产生ID碰撞(由数据中心ID和机器ID作区分)，并且效率较高，经测试，SnowFlake每秒能够产生26万ID左右。\n */</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SnowflakeIdWorker</span> <span class="token punctuation">{</span>\n\n    <span class="token comment">// ==============================Fields===========================================</span>\n    <span class="token comment">/** 开始时间截 (2015-01-01) */</span>\n    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">long</span> twepoch <span class="token operator">=</span> <span class="token number">1420041600000L</span><span class="token punctuation">;</span>\n\n    <span class="token comment">/** 机器id所占的位数 */</span>\n    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">long</span> workerIdBits <span class="token operator">=</span> <span class="token number">5L</span><span class="token punctuation">;</span>\n\n    <span class="token comment">/** 数据标识id所占的位数 */</span>\n    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">long</span> datacenterIdBits <span class="token operator">=</span> <span class="token number">5L</span><span class="token punctuation">;</span>\n\n    <span class="token comment">/** 支持的最大机器id，结果是31 (这个移位算法可以很快的计算出几位二进制数所能表示的最大十进制数) */</span>\n    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">long</span> maxWorkerId <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1L</span> <span class="token operator">^</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1L</span> <span class="token operator">&lt;&lt;</span> workerIdBits<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token comment">/** 支持的最大数据标识id，结果是31 */</span>\n    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">long</span> maxDatacenterId <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1L</span> <span class="token operator">^</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1L</span> <span class="token operator">&lt;&lt;</span> datacenterIdBits<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token comment">/** 序列在id中占的位数 */</span>\n    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">long</span> sequenceBits <span class="token operator">=</span> <span class="token number">12L</span><span class="token punctuation">;</span>\n\n    <span class="token comment">/** 机器ID向左移12位 */</span>\n    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">long</span> workerIdShift <span class="token operator">=</span> sequenceBits<span class="token punctuation">;</span>\n\n    <span class="token comment">/** 数据标识id向左移17位(12+5) */</span>\n    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">long</span> datacenterIdShift <span class="token operator">=</span> sequenceBits <span class="token operator">+</span> workerIdBits<span class="token punctuation">;</span>\n\n    <span class="token comment">/** 时间截向左移22位(5+5+12) */</span>\n    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">long</span> timestampLeftShift <span class="token operator">=</span> sequenceBits <span class="token operator">+</span> workerIdBits <span class="token operator">+</span> datacenterIdBits<span class="token punctuation">;</span>\n\n    <span class="token comment">/** 生成序列的掩码，这里为4095 (0b111111111111=0xfff=4095) */</span>\n    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">long</span> sequenceMask <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1L</span> <span class="token operator">^</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1L</span> <span class="token operator">&lt;&lt;</span> sequenceBits<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token comment">/** 工作机器ID(0~31) */</span>\n    <span class="token keyword">private</span> <span class="token keyword">long</span> workerId<span class="token punctuation">;</span>\n\n    <span class="token comment">/** 数据中心ID(0~31) */</span>\n    <span class="token keyword">private</span> <span class="token keyword">long</span> datacenterId<span class="token punctuation">;</span>\n\n    <span class="token comment">/** 毫秒内序列(0~4095) */</span>\n    <span class="token keyword">private</span> <span class="token keyword">long</span> sequence <span class="token operator">=</span> <span class="token number">0L</span><span class="token punctuation">;</span>\n\n    <span class="token comment">/** 上次生成ID的时间截 */</span>\n    <span class="token keyword">private</span> <span class="token keyword">long</span> lastTimestamp <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1L</span><span class="token punctuation">;</span>\n\n    <span class="token comment">//==============================Constructors=====================================</span>\n    <span class="token comment">/**\n     * 构造函数\n     * @param workerId 工作ID (0~31)\n     * @param datacenterId 数据中心ID (0~31)\n     */</span>\n    <span class="token keyword">public</span> <span class="token class-name">SnowflakeIdWorker</span><span class="token punctuation">(</span><span class="token keyword">long</span> workerId<span class="token punctuation">,</span> <span class="token keyword">long</span> datacenterId<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>workerId <span class="token operator">&gt;</span> maxWorkerId <span class="token operator">||</span> workerId <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;worker Id can&#39;t be greater than %d or less than 0&quot;</span><span class="token punctuation">,</span> maxWorkerId<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>datacenterId <span class="token operator">&gt;</span> maxDatacenterId <span class="token operator">||</span> datacenterId <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;datacenter Id can&#39;t be greater than %d or less than 0&quot;</span><span class="token punctuation">,</span> maxDatacenterId<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>workerId <span class="token operator">=</span> workerId<span class="token punctuation">;</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>datacenterId <span class="token operator">=</span> datacenterId<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token comment">// ==============================Methods==========================================</span>\n    <span class="token comment">/**\n     * 获得下一个ID (该方法是线程安全的)\n     * @return SnowflakeId\n     */</span>\n    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">long</span> <span class="token function">nextId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">long</span> timestamp <span class="token operator">=</span> <span class="token function">timeGen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">//如果当前时间小于上一次ID生成的时间戳，说明系统时钟回退过这个时候应当抛出异常</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>timestamp <span class="token operator">&lt;</span> lastTimestamp<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>\n                    <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;Clock moved backwards.  Refusing to generate id for %d milliseconds&quot;</span><span class="token punctuation">,</span> lastTimestamp <span class="token operator">-</span> timestamp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\n        <span class="token comment">//如果是同一时间生成的，则进行毫秒内序列</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>lastTimestamp <span class="token operator">==</span> timestamp<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            sequence <span class="token operator">=</span> <span class="token punctuation">(</span>sequence <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> sequenceMask<span class="token punctuation">;</span>\n            <span class="token comment">//毫秒内序列溢出</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span>sequence <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token comment">//阻塞到下一个毫秒,获得新的时间戳</span>\n                timestamp <span class="token operator">=</span> <span class="token function">tilNextMillis</span><span class="token punctuation">(</span>lastTimestamp<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n        <span class="token comment">//时间戳改变，毫秒内序列重置</span>\n        <span class="token keyword">else</span> <span class="token punctuation">{</span>\n            sequence <span class="token operator">=</span> <span class="token number">0L</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\n        <span class="token comment">//上次生成ID的时间截</span>\n        lastTimestamp <span class="token operator">=</span> timestamp<span class="token punctuation">;</span>\n\n        <span class="token comment">//移位并通过或运算拼到一起组成64位的ID</span>\n        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>timestamp <span class="token operator">-</span> twepoch<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> timestampLeftShift<span class="token punctuation">)</span> <span class="token comment">//</span>\n                <span class="token operator">|</span> <span class="token punctuation">(</span>datacenterId <span class="token operator">&lt;&lt;</span> datacenterIdShift<span class="token punctuation">)</span> <span class="token comment">//</span>\n                <span class="token operator">|</span> <span class="token punctuation">(</span>workerId <span class="token operator">&lt;&lt;</span> workerIdShift<span class="token punctuation">)</span> <span class="token comment">//</span>\n                <span class="token operator">|</span> sequence<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token comment">/**\n     * 阻塞到下一个毫秒，直到获得新的时间戳\n     * @param lastTimestamp 上次生成ID的时间截\n     * @return 当前时间戳\n     */</span>\n    <span class="token keyword">protected</span> <span class="token keyword">long</span> <span class="token function">tilNextMillis</span><span class="token punctuation">(</span><span class="token keyword">long</span> lastTimestamp<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">long</span> timestamp <span class="token operator">=</span> <span class="token function">timeGen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">while</span> <span class="token punctuation">(</span>timestamp <span class="token operator">&lt;=</span> lastTimestamp<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            timestamp <span class="token operator">=</span> <span class="token function">timeGen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">return</span> timestamp<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token comment">/**\n     * 返回以毫秒为单位的当前时间\n     * @return 当前时间(毫秒)\n     */</span>\n    <span class="token keyword">protected</span> <span class="token keyword">long</span> <span class="token function">timeGen</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token comment">//==============================Test=============================================</span>\n    <span class="token comment">/** 测试 */</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">SnowflakeIdWorker</span> idWorker <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SnowflakeIdWorker</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">long</span> id <span class="token operator">=</span> idWorker<span class="token punctuation">.</span><span class="token function">nextId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token function">toBinaryString</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h2 id="jenkins"><a class="header-anchor" href="#jenkins" aria-hidden="true">#</a> Jenkins</h2><p>shell 脚本保持状态, 加载环境变量:</p><div class="language-bash"><pre><code><span class="token assign-left variable">BUILD_ID</span><span class="token operator">=</span>DONTKILLME\n<span class="token builtin class-name">.</span> /etc/profile\n</code></pre></div><h2 id="filder"><a class="header-anchor" href="#filder" aria-hidden="true">#</a> Filder</h2><p>显示 IP, 输出 websocket 日志:</p><div class="language-bash"><pre><code>Main<span class="token punctuation">(</span><span class="token punctuation">)</span>: FiddlerObject.UI.lvSessions.AddBoundColumn<span class="token punctuation">(</span><span class="token string">&quot;ServerIP&quot;</span>, <span class="token number">120</span>, <span class="token string">&quot;X-HostIP&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nclass Handlers:\nstatic <span class="token keyword">function</span> OnWebSocketMessage<span class="token punctuation">(</span>oMsg: WebSocketMessage<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        // Log Message to the LOG tab\n        FiddlerApplication.Log.LogString<span class="token punctuation">(</span>oMsg.ToString<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h3 id="内置命令"><a class="header-anchor" href="#内置命令" aria-hidden="true">#</a> 内置命令</h3><div class="language-bash"><pre><code><span class="token number">1</span>. <span class="token keyword">select</span> xxx:  选择xxx类型的,  例如 <span class="token keyword">select</span> html , <span class="token keyword">select</span> image ,select video<span class="token punctuation">..</span><span class="token punctuation">..</span> , content-type的类型\n<span class="token number">2</span>. allbut xxxx: allbut image--<span class="token operator">&gt;</span>只选择图片类型的, 会把其它捕获都删除<span class="token operator">!</span><span class="token operator">!</span><span class="token operator">!</span><span class="token operator">!</span>\n<span class="token number">3</span>. ?xxx: 选择url中包含xxx的\n<span class="token number">4</span>. <span class="token punctuation">\\</span><span class="token operator">&gt;</span>size <span class="token operator">&lt;</span>size: 过滤响应内容大小, 只能写数字 <span class="token operator">&gt;</span><span class="token number">40000</span>   单位<span class="token punctuation">(</span>b<span class="token punctuation">)</span>\n<span class="token number">5</span>. @host: 请求url包含xxx的, 例如:  @oschina.net\n<span class="token number">6</span>. <span class="token operator">=</span>status: <span class="token operator">=</span><span class="token number">200</span> <span class="token operator">==</span><span class="token number">404</span> 过滤响应码\n<span class="token number">7</span>. Bpafter， Bps, bpv, bpm, bpu: 断点命令,  也可以在filters中设置\n   Bpafter xxx: 中断 URL 包含指定字符的全部 session 响应\n    Bps xxx: 中断 HTTP 响应状态为指定字符的全部 session 响应。\n    Bpv xxx: 中断指定请求方式的全部 session 响应\n    Bpm xxx: 中断指定请求方式的全部 session 响应。等同于bpv xxx\n    Bpu xxx:与bpafter类似。\n</code></pre></div><h2 id="远程调试"><a class="header-anchor" href="#远程调试" aria-hidden="true">#</a> 远程调试</h2><ol><li><p>Tomcat <code>startup.sh</code> 开头</p><blockquote><p>declare -x CATALINA_OPTS=“-server -Xdebug -Xnoagent -Djava.compiler=NONE -Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=3316”</p></blockquote></li><li><p>Jar</p><blockquote><p>java -jar -Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=3316 xxx.jar</p></blockquote></li></ol><h2 id="firewalld"><a class="header-anchor" href="#firewalld" aria-hidden="true">#</a> Firewalld</h2><div class="language-bash"><pre><code>firewall-cmd --zone<span class="token operator">=</span>public --add-port<span class="token operator">=</span><span class="token number">80</span>-9000/tcp --permanent\n\nfirewall-cmd --zone<span class="token operator">=</span>public --remove-port<span class="token operator">=</span><span class="token number">80</span>/tcp --permanent\n\nfirewall-cmd --permanent --add-rich-rule<span class="token operator">=</span><span class="token string">&quot;rule family=&quot;</span>ipv4<span class="token string">&quot; source address=&quot;</span><span class="token number">1.1</span>.1.1<span class="token string">&quot; port protocol=&quot;</span>tcp<span class="token string">&quot; port=&quot;</span><span class="token number">8080</span><span class="token string">&quot; accept&quot;</span>\nfirewall-cmd --permanent --remove-rich-rule<span class="token operator">=</span><span class="token string">&quot;rule family=&quot;</span>ipv4<span class="token string">&quot; source address=&quot;</span><span class="token number">1.1</span>.1.1<span class="token string">&quot; port protocol=&quot;</span>tcp<span class="token string">&quot; port=&quot;</span><span class="token number">8080</span><span class="token string">&quot; accept&quot;</span>\n</code></pre></div><h2 id="jdk-环境变量"><a class="header-anchor" href="#jdk-环境变量" aria-hidden="true">#</a> JDK 环境变量</h2><p>Windows:</p><div class="language-bash"><pre><code><span class="token assign-left variable">JAVA_HOME</span><span class="token operator">==</span>D:<span class="token punctuation">\\</span>dev<span class="token punctuation">\\</span>Java<span class="token punctuation">\\</span>jdk1.6.0_12<span class="token punctuation">\\</span>\n<span class="token assign-left variable">classpath</span><span class="token operator">==</span>.<span class="token punctuation">;</span>%JAVA_HOME%<span class="token punctuation">\\</span>lib<span class="token punctuation">;</span>%JAVA_HOME%<span class="token punctuation">\\</span>lib<span class="token punctuation">\\</span>tools.jar\n<span class="token assign-left variable">path</span><span class="token operator">==</span>%JAVA_HOME%<span class="token punctuation">\\</span>bin<span class="token punctuation">;</span>%JAVA_HOME%<span class="token punctuation">\\</span>jre<span class="token punctuation">\\</span>bin\n</code></pre></div><p>Linux: /etc/profile</p><div class="language-bash"><pre><code><span class="token builtin class-name">export</span> <span class="token assign-left variable">JAVA_HOME</span><span class="token operator">=</span>/home/jdk1.8.0_152\n<span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token variable">$JAVA_HOME</span>/bin:<span class="token environment constant">$PATH</span>\n<span class="token builtin class-name">export</span> <span class="token assign-left variable">CLASSPATH</span><span class="token operator">=</span>.:<span class="token variable">$JAVA_HOME</span>/lib/dt.jar:<span class="token variable">$JAVA_HOME</span>/lib/tools.jar\n</code></pre></div>',57);t.render=function(a,e,t,o,c,l){return n(),s("div",null,[p])};export default t;export{e as __pageData};
