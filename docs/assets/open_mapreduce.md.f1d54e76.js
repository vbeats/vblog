import{o as n,c as a,d as s}from"./app.040fc7a7.js";const t='{"title":"MapReduce","description":"","frontmatter":{},"headers":[{"level":2,"title":"Map","slug":"map"},{"level":2,"title":"Reduce","slug":"reduce"},{"level":2,"title":"Code","slug":"code"},{"level":2,"title":"自定义 Writable","slug":"自定义-writable"},{"level":2,"title":"Map Task","slug":"map-task"},{"level":2,"title":"FileInputFormat","slug":"fileinputformat"},{"level":2,"title":"TextInputFormat","slug":"textinputformat"},{"level":2,"title":"CombineTextInputFormat","slug":"combinetextinputformat"},{"level":2,"title":"KeyValueTextInputFormat","slug":"keyvaluetextinputformat"},{"level":2,"title":"NLineInputFormat","slug":"nlineinputformat"},{"level":2,"title":"自定义 FileInputFormat","slug":"自定义-fileinputformat"},{"level":2,"title":"Shuffle","slug":"shuffle"},{"level":2,"title":"OutPutFormat","slug":"outputformat"},{"level":2,"title":"Join","slug":"join"}],"relativePath":"open/mapreduce.md","lastUpdated":1627208176278}',p={},e=s('<h1 id="mapreduce"><a class="header-anchor" href="#mapreduce" aria-hidden="true">#</a> MapReduce</h1><blockquote><p>离线数据处理, 数据源静态, 不适合实时 or 流式计算</p></blockquote><h2 id="map"><a class="header-anchor" href="#map" aria-hidden="true">#</a> Map</h2><ol><li>按文件块大小切分数据</li><li>并行跑 map task 任务</li></ol><h2 id="reduce"><a class="header-anchor" href="#reduce" aria-hidden="true">#</a> Reduce</h2><ol><li>并行跑 reduce task, 数据依赖上一阶段 map task 的结果</li></ol><h2 id="code"><a class="header-anchor" href="#code" aria-hidden="true">#</a> Code</h2><ol><li>extend Mapper</li><li>输入数据是 KV 键值对形式</li><li>map()方法: 具体的业务逻辑, 每个&lt;K,V&gt;数据只处理一次</li><li>extend Reduce</li><li>输出数据是 KV 键值对形式</li><li>reduce()方法: 具体的业务逻辑, 每组相同的 K &lt;K,V&gt;只调用一次 reduce()</li><li>driver: yarn 客户端,提交 job(split 切片/jar/xml 配置信息…) 到 yarn 集群中</li></ol><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Mapper</p></div><div class="language-java"><pre><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestMapper</span> <span class="token keyword">extends</span> <span class="token class-name">Mapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">LongWritable</span><span class="token punctuation">,</span> <span class="token class-name">Text</span><span class="token punctuation">,</span> <span class="token class-name">Text</span><span class="token punctuation">,</span> <span class="token class-name">IntWritable</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>\n    <span class="token keyword">private</span> <span class="token class-name">Text</span> k <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token class-name">IntWritable</span> v <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IntWritable</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">LongWritable</span> key<span class="token punctuation">,</span> <span class="token class-name">Text</span> value<span class="token punctuation">,</span> <span class="token class-name">Context</span> context<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 输入</span>\n        <span class="token comment">// xxx sss</span>\n        <span class="token comment">// kkk  lll   mmmm    map默认按行分割 LongWritable key: io读取指针偏移量</span>\n        <span class="token class-name">String</span> line <span class="token operator">=</span> value<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> words <span class="token operator">=</span> line<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> word <span class="token operator">:</span> words<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            k<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>word<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token comment">// xxx,1</span>\n            <span class="token comment">// sss,1</span>\n            <span class="token comment">// kkk,1</span>\n            context<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Reducer</p></div><div class="language-java"><pre><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestReducer</span> <span class="token keyword">extends</span> <span class="token class-name">Reducer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Text</span><span class="token punctuation">,</span> <span class="token class-name">IntWritable</span><span class="token punctuation">,</span> <span class="token class-name">Text</span><span class="token punctuation">,</span> <span class="token class-name">IntWritable</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>\n    <span class="token class-name">IntWritable</span> v <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IntWritable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">reduce</span><span class="token punctuation">(</span><span class="token class-name">Text</span> key<span class="token punctuation">,</span> <span class="token class-name">Iterable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">IntWritable</span><span class="token punctuation">&gt;</span></span> values<span class="token punctuation">,</span> <span class="token class-name">Context</span> context<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>\n        <span class="token comment">// xxx,1</span>\n        <span class="token comment">// sss,1</span>\n        <span class="token comment">// kkk,1</span>\n        <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">IntWritable</span> value <span class="token operator">:</span> values<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            sum <span class="token operator">+=</span> value<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\n        v<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        context<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Driver</p></div><div class="language-java"><pre><code> <span class="token class-name">Configuration</span> conf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Configuration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token class-name">Job</span> job <span class="token operator">=</span> <span class="token class-name">Job</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>conf<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        job<span class="token punctuation">.</span><span class="token function">setJarByClass</span><span class="token punctuation">(</span><span class="token class-name">Test</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        job<span class="token punctuation">.</span><span class="token function">setMapperClass</span><span class="token punctuation">(</span><span class="token class-name">TestMapper</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        job<span class="token punctuation">.</span><span class="token function">setReducerClass</span><span class="token punctuation">(</span><span class="token class-name">TestReducer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        job<span class="token punctuation">.</span><span class="token function">setMapOutputKeyClass</span><span class="token punctuation">(</span><span class="token class-name">Text</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        job<span class="token punctuation">.</span><span class="token function">setMapOutputValueClass</span><span class="token punctuation">(</span><span class="token class-name">IntWritable</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        job<span class="token punctuation">.</span><span class="token function">setOutputKeyClass</span><span class="token punctuation">(</span><span class="token class-name">Text</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        job<span class="token punctuation">.</span><span class="token function">setOutputValueClass</span><span class="token punctuation">(</span><span class="token class-name">IntWritable</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token class-name">FileInputFormat</span><span class="token punctuation">.</span><span class="token function">setInputPaths</span><span class="token punctuation">(</span>job<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Path</span><span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输入data会进行切割</span>\n        <span class="token class-name">FileOutputFormat</span><span class="token punctuation">.</span><span class="token function">setOutputPath</span><span class="token punctuation">(</span>job<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Path</span><span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">// 提交job</span>\n        job<span class="token punctuation">.</span><span class="token function">waitForCompletion</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><h2 id="自定义-writable"><a class="header-anchor" href="#自定义-writable" aria-hidden="true">#</a> 自定义 Writable</h2><ol><li>extends Writable</li><li>必须有无参构造方法</li><li>write/readFields 字段顺序要一致</li><li>重写 toSring()</li><li>需要放到 Key 中的必须能排序, 实现 Comparable 接口</li></ol><h2 id="map-task"><a class="header-anchor" href="#map-task" aria-hidden="true">#</a> Map Task</h2><p>数据切片尽量按数据块大小来(128M), 每个切片开启一个 map task</p><h2 id="fileinputformat"><a class="header-anchor" href="#fileinputformat" aria-hidden="true">#</a> FileInputFormat</h2><p>切片, job 提交后 Yarn app master 会根据切片数计算好需要的 map task 数量</p><h2 id="textinputformat"><a class="header-anchor" href="#textinputformat" aria-hidden="true">#</a> TextInputFormat</h2><blockquote><p>FileInputFormat 默认实现类, 按行读取</p></blockquote><ol><li>key : 改行在整个文件中的起始字节偏移量, LongWritable</li><li>Value: 一行内容, 不包含换行符</li></ol><h2 id="combinetextinputformat"><a class="header-anchor" href="#combinetextinputformat" aria-hidden="true">#</a> CombineTextInputFormat</h2><p>小文件过多时, 逻辑上分到一个切片上</p><div class="language-java"><pre><code>job<span class="token punctuation">.</span><span class="token function">setInputFormatClass</span><span class="token punctuation">(</span><span class="token class-name">CombineTextInputFormat</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token function">setMaxInputSplitSize</span><span class="token punctuation">(</span>job<span class="token punctuation">,</span>size<span class="token punctuation">)</span>\n</code></pre></div><h2 id="keyvaluetextinputformat"><a class="header-anchor" href="#keyvaluetextinputformat" aria-hidden="true">#</a> KeyValueTextInputFormat</h2><blockquote><p>按行切割, 每一行按 tab(\\t)分割为 key 和 value</p></blockquote><h2 id="nlineinputformat"><a class="header-anchor" href="#nlineinputformat" aria-hidden="true">#</a> NLineInputFormat</h2><blockquote><p>按指定行数 N 切片</p></blockquote><h2 id="自定义-fileinputformat"><a class="header-anchor" href="#自定义-fileinputformat" aria-hidden="true">#</a> 自定义 FileInputFormat</h2><ol><li>extends FileInputFormat</li><li>改写 recodrReader, 定义读取文件封装为 k,v 的逻辑, 交给 Mapper/Reducer 处理</li><li>使用 SequenceFileOutPutFormat 输出合并文件</li></ol><h2 id="shuffle"><a class="header-anchor" href="#shuffle" aria-hidden="true">#</a> Shuffle</h2><blockquote><p>Mapper 与 Reducer 之间的数据处理过程, 分区 排序 压缩…</p></blockquote><ol><li>分区: 默认按 key 的 (hashcode%reducer task 个数) 分区, 不同分区会输出到不同文件, partition 从 0 开启</li></ol><div class="language-bash"><pre><code>自定义分区:\n    <span class="token number">1</span>. extneds Partitioner\n    <span class="token number">2</span>. job.setPartitionerClass\n    <span class="token number">3</span>. 设置相应数量的reducer task\n</code></pre></div><ol start="2"><li>排序: 默认按 key 字典排序</li></ol><div class="language-bash"><pre><code><span class="token number">1</span>. 部分排序: 单个文件内部有序\n<span class="token number">2</span>. 全排序: reduce只输出一个文件, 对于整个文件排序\n<span class="token number">3</span>. 二次排序\n<span class="token number">4</span>. 自定义排序: 自定义对象作为key, 实现WritableComparable接口\n</code></pre></div><ol start="3"><li>Combiner: 压缩合并</li></ol><blockquote><p>继承自 Reducer, 对每个 map task 的输出进行局部汇总, 减少数据传输. 不能改变最终结果(求平均值这种就不适合)</p></blockquote><div class="language-bash"><pre><code><span class="token number">1</span>. extends Reducer\n<span class="token number">2</span>. job.setCombinerClass\n<span class="token comment"># 或者直接指定CombinerClass为reducerClass</span>\n</code></pre></div><ol start="4"><li>GroupingComparator</li></ol><blockquote><p>分组排序, 对 map task 输出的 key 进一步排序</p></blockquote><div class="language-bash"><pre><code><span class="token number">1</span>. extends WritableComparator\n<span class="token number">2</span>. 无参构造方法调用 super<span class="token punctuation">(</span>Bean.class, <span class="token boolean">true</span><span class="token punctuation">)</span>, <span class="token boolean">true</span> 为创建 bean 对象, <span class="token boolean">false</span> 对象全为 null\n<span class="token number">3</span>. 重写 compare 方法\n<span class="token number">4</span>. job.setGroupingComparatorClass\n</code></pre></div><h2 id="outputformat"><a class="header-anchor" href="#outputformat" aria-hidden="true">#</a> OutPutFormat</h2><ol><li>TextOutPutFormat 默认按行写</li><li>SequenceFileOutPutFormat</li><li>自定义 OutPutFormat</li></ol><div class="language-bash"><pre><code><span class="token number">1</span>. extends FileOutPutFormat\n<span class="token number">2</span>. 改写RecordWriter\n</code></pre></div><h2 id="join"><a class="header-anchor" href="#join" aria-hidden="true">#</a> Join</h2><ol><li>Map 阶段: 不同来源的数据打标签, 连接字段作为 key(比如: id), 其余部分为 value</li><li>Reduce: 每个分组中不同来源的记录分开, 最后合并</li></ol>',49);p.render=function(s,t,p,o,c,l){return n(),a("div",null,[e])};export default p;export{t as __pageData};
