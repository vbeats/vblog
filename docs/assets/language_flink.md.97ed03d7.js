import{o as n,c as s,d as a}from"./app.652182a8.js";const t='{"title":"Flink","description":"","frontmatter":{},"headers":[{"level":2,"title":"DateSet","slug":"dateset"},{"level":2,"title":"DateStream","slug":"datestream"},{"level":2,"title":"job manager","slug":"job-manager"},{"level":2,"title":"task manager","slug":"task-manager"},{"level":2,"title":"redource manager","slug":"redource-manager"},{"level":2,"title":"dispatcher","slug":"dispatcher"},{"level":2,"title":"Parallelism","slug":"parallelism"},{"level":2,"title":"dataflow","slug":"dataflow"},{"level":2,"title":"任务链","slug":"任务链"},{"level":2,"title":"API","slug":"api"},{"level":2,"title":"window","slug":"window"},{"level":2,"title":"时间语义","slug":"时间语义"},{"level":2,"title":"watermark","slug":"watermark"},{"level":2,"title":"状态管理","slug":"状态管理"},{"level":2,"title":"process api","slug":"process-api"},{"level":2,"title":"容错","slug":"容错"},{"level":2,"title":"table api(sql)","slug":"table-api-sql"},{"level":2,"title":"cep","slug":"cep"}],"relativePath":"language/flink.md","lastUpdated":1633957213545}',p={},o=a('<h1 id="flink"><a class="header-anchor" href="#flink" aria-hidden="true">#</a> Flink</h1><blockquote><p>事件驱动 高吞吐 低延迟 时间有序</p></blockquote><h2 id="dateset"><a class="header-anchor" href="#dateset" aria-hidden="true">#</a> DateSet</h2><p><code>离线数据批处理</code></p><div class="language-java"><pre><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>\n        <span class="token class-name">ExecutionEnvironment</span> env <span class="token operator">=</span> <span class="token class-name">ExecutionEnvironment</span><span class="token punctuation">.</span><span class="token function">getExecutionEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token class-name">DataSource</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> dataSource <span class="token operator">=</span> env<span class="token punctuation">.</span><span class="token function">readTextFile</span><span class="token punctuation">(</span><span class="token string">&quot;D:\\\\Codes\\\\flink-demo\\\\src\\\\main\\\\resources\\\\data.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token class-name">AggregateOperator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Tuple2</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> operator <span class="token operator">=</span> dataSource<span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token function">xx</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">groupBy</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        operator<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> xx <span class="token keyword">implements</span> <span class="token class-name">FlatMapFunction</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Tuple2</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>\n        <span class="token annotation punctuation">@Override</span>\n        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">flatMap</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">,</span> <span class="token class-name">Collector</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Tuple2</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> collector<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>\n            <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> strings <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> string <span class="token operator">:</span> strings<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                collector<span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Tuple2</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>string<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// (xx,1)</span>\n<span class="token comment">// (oo,1)</span>\n<span class="token comment">// (uu,1)</span>\n<span class="token comment">// (kk,2)</span>\n<span class="token comment">// (xxx,1)</span>\n<span class="token comment">// (world,2)</span>\n<span class="token comment">// (yy,1)</span>\n<span class="token comment">// (vv,1)</span>\n<span class="token comment">// (hello,4)</span>\n</code></pre></div><p>java 少用<code>lambda</code> ,会导致 flink 自动类型推断异常</p><h2 id="datestream"><a class="header-anchor" href="#datestream" aria-hidden="true">#</a> DateStream</h2><p><code>流式数据</code></p><div class="language-java"><pre><code>       <span class="token class-name">StreamExecutionEnvironment</span> env <span class="token operator">=</span> <span class="token class-name">StreamExecutionEnvironment</span><span class="token punctuation">.</span><span class="token function">getExecutionEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n       <span class="token comment">// env.setParallelism(1);</span>\n        <span class="token class-name">DataStreamSource</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> dataSource <span class="token operator">=</span> env<span class="token punctuation">.</span><span class="token function">readTextFile</span><span class="token punctuation">(</span><span class="token string">&quot;D:\\\\Codes\\\\flink-demo\\\\src\\\\main\\\\resources\\\\data.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token class-name">SingleOutputStreamOperator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Tuple2</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> operator <span class="token operator">=</span> dataSource<span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token function">xx</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n                <span class="token punctuation">.</span><span class="token function">keyBy</span><span class="token punctuation">(</span>t <span class="token operator">-&gt;</span> t<span class="token punctuation">.</span><span class="token function">getField</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        operator<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        env<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 3&gt; (kk,1)</span>\n<span class="token comment">// 4&gt; (hello,1)</span>\n<span class="token comment">// 1&gt; (xx,1)</span>\n<span class="token comment">// 4&gt; (yy,1)</span>\n<span class="token comment">// 8&gt; (vv,1)</span>\n<span class="token comment">// 8&gt; (xxx,1)</span>\n<span class="token comment">// 3&gt; (uu,1)</span>\n<span class="token comment">// 10&gt; (oo,1)</span>\n<span class="token comment">// 3&gt; (kk,2)</span>\n<span class="token comment">// 7&gt; (world,1)</span>\n<span class="token comment">// 4&gt; (hello,2)</span>\n<span class="token comment">// 7&gt; (world,2)</span>\n<span class="token comment">// 4&gt; (hello,3)</span>\n<span class="token comment">// 4&gt; (hello,4)</span>\n\n</code></pre></div><h2 id="job-manager"><a class="header-anchor" href="#job-manager" aria-hidden="true">#</a> job manager</h2><p>作业管理: 作业图 逻辑数据流图 所有的 jar 资源</p><p>向<code>resource manager</code>申请资源 check points 检查</p><h2 id="task-manager"><a class="header-anchor" href="#task-manager" aria-hidden="true">#</a> task manager</h2><p>工作进程(jvm 进程): 分配 <code>slots</code> 执行任务</p><h2 id="redource-manager"><a class="header-anchor" href="#redource-manager" aria-hidden="true">#</a> redource manager</h2><p>管理 task manager 资源<code>slots</code></p><h2 id="dispatcher"><a class="header-anchor" href="#dispatcher" aria-hidden="true">#</a> dispatcher</h2><p><code>web ui</code> 作业/任务管理接口</p><p>应用–&gt;dispatcher–&gt;提交给 jobmanager—&gt;向 resource manager 申请资源–&gt;交给 task manager 处理</p><h2 id="parallelism"><a class="header-anchor" href="#parallelism" aria-hidden="true">#</a> Parallelism</h2><p><code>并行度</code> 并行子任务个数, 不同子任务可以在同一个 slot 执行, 必须是有前后执行顺序的</p><p>同时执行的子任务必须分配在不同的 slot</p><p><code>slot</code>间内存资源互相隔离</p><p><code>slotSharingGroup()</code> 不同组的要分配不同的 slot</p><h2 id="dataflow"><a class="header-anchor" href="#dataflow" aria-hidden="true">#</a> dataflow</h2><p>source–&gt;transformation–&gt;sink</p><h2 id="任务链"><a class="header-anchor" href="#任务链" aria-hidden="true">#</a> 任务链</h2><p>并行度相同的 one-to-one 合并</p><h2 id="api"><a class="header-anchor" href="#api" aria-hidden="true">#</a> API</h2><p><code>createLocalEnvironment</code> <code>createRemoteEnvironment</code> <code>getExecutionEnvironment</code></p><ul><li><p>data source : <code>collection</code> <code>file</code> <code>csv</code> <code>kafka</code> <code>socket</code> …</p><p><code>addSource(new FlinkKafkaConsumer&lt;String&gt;(&quot;topic&quot;,new SimpleStringSchema(),kafkaProperties))</code></p></li><li><p>transform: <code>flatmap</code> <code>map</code> <code>filter</code> <code>keyBy</code>分组 聚合</p><p><code>rich function</code> : 可以获取到运行上下文</p><p><code>max</code> 与 <code>maxBy</code>: max 只更新聚合字段值,其它属性值不变, maxBy 整个对象都会更新</p><p><code>reduce</code>: <code>T reduce(T v1,T v2)</code> 前后状态比较</p><p><code>SplitStream</code>: <code>split</code> <code>select</code> 分割成多个数据流分离处理</p><div class="language-java"><pre><code><span class="token class-name">SplitStream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">People</span><span class="token punctuation">&gt;</span></span> splitStream <span class="token operator">=</span> source<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MapFunction</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">People</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token annotation punctuation">@Override</span>\n          <span class="token keyword">public</span> <span class="token class-name">People</span> <span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">String</span> value<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>\n              <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Gson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> <span class="token class-name">People</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n          <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">OutputSelector</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">People</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// split可以将一个流，通过打Tag的方式，split成多个流</span>\n          <span class="token annotation punctuation">@Override</span>\n          <span class="token keyword">public</span> <span class="token class-name">Iterable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">select</span><span class="token punctuation">(</span><span class="token class-name">People</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n              <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n              <span class="token keyword">if</span> <span class="token punctuation">(</span>value<span class="token punctuation">.</span><span class="token function">sex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">&quot;male&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                  list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;male&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n              <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n                  list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;female&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n              <span class="token punctuation">}</span>\n              <span class="token keyword">return</span> list<span class="token punctuation">;</span>\n          <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n      <span class="token comment">// SplitStream流 通过select(&quot;tag&quot;)获取DataStream流</span>\n      <span class="token class-name">DataStream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">People</span><span class="token punctuation">&gt;</span></span> male <span class="token operator">=</span> splitStream<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">&quot;male&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      male<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;male:&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n      <span class="token class-name">DataStream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">People</span><span class="token punctuation">&gt;</span></span> female <span class="token operator">=</span> splitStream<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">&quot;female&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      female<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;female:&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n</code></pre></div><p><code>Connect</code> <code>CoMap</code>: 合并两个 dataStream, 类型可以不同 <code>union</code>可以合并多个数据流,数据类型要相同</p><div class="language-java"><pre><code><span class="token class-name">ConnectedStreams</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> connected <span class="token operator">=</span> first<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span>second<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">CoMapFunction</span><span class="token punctuation">[</span>IN1<span class="token punctuation">,</span> IN2<span class="token punctuation">,</span> OUT<span class="token punctuation">]</span>\n\n<span class="token class-name">CoFlatMapFunction</span><span class="token punctuation">[</span>IN1<span class="token punctuation">,</span> IN2<span class="token punctuation">,</span> OUT<span class="token punctuation">]</span>\n\n</code></pre></div></li><li><p>sink</p><p><code>addSink</code>: 计算结果输出</p></li></ul><h2 id="window"><a class="header-anchor" href="#window" aria-hidden="true">#</a> window</h2><p>无限流数据切割为有限流, 分发到有限大小<code>bucket</code>中</p><p><code>time window</code>: 滚动<code>tumbling</code> 滑动<code>sliding</code> 会话<code>session</code>:timeout 时间间隙,没有新数据开始新窗口</p><p><code>count window</code>: 滚动 滑动</p><p><code>window size</code> <code>slide size</code> 滑动窗口数据会重叠</p><p>使用: <code>keyBy</code>–&gt;<code>timewindow()</code>–&gt;<code>聚合</code> 窗口结束后<code>state</code>结果输出</p><p><code>增量聚合</code></p><p><code>全窗口函数</code>:<code>bucket</code>收集数据,计算的时候再遍历数据 <code>apply(WindowFunction)</code></p><p><code>triger</code>: 触发器, 触发 window 关闭 触发结果计算输出</p><p><code>evitor</code>: 移除某些数据 <code>allowedLateness</code>: 允许延迟时间(窗口延迟关闭)</p><p><code>sideOutPutLateData</code>: 迟到数据扔到 side out 另一个数据流</p><h2 id="时间语义"><a class="header-anchor" href="#时间语义" aria-hidden="true">#</a> 时间语义</h2><ul><li><p>event time : 事件创建时间</p></li><li><p>ingestion time: 数据进入 flink 的时间</p></li><li><p>process time: 处理数据的时间 (默认)</p><p><code>env.setStreamTimeCharacteristic(TimeCharacteristic.EventTime)</code> : 同时指定数据哪个字段代表 <code>event time</code></p></li></ul><h2 id="watermark"><a class="header-anchor" href="#watermark" aria-hidden="true">#</a> watermark</h2><p>短时间大量乱序数据, 延迟窗口关闭时间</p><p><code>watermark</code>是一条特殊的数据记录<code>StreamElement</code></p><p>必须单调递增, 与数据的时间戳相关</p><p>上游任务向下广播<code>watermark</code>时间, 下游任务按最小时间戳推进事件时间</p><div class="language-java"><pre><code><span class="token comment">// 提取时间戳   生成watermark</span>\ndataStream<span class="token punctuation">.</span><span class="token function">assignTimestampsAndWatermarks</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BoundedOutOfOrdernessTimestampExtractor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>watermark延时时间<span class="token punctuation">)</span><span class="token punctuation">)</span>\n</code></pre></div><h2 id="状态管理"><a class="header-anchor" href="#状态管理" aria-hidden="true">#</a> 状态管理</h2><p>state 不能跨任务读取</p><ul><li><p>operator state</p><p><code>mapFunction</code> 局部变量</p><p><code>implements ListCheckPoint&lt;&gt;</code> : <code>snapsotState</code> <code>restoreState</code> 存储/恢复 state 状态</p></li><li><p>keyed state</p><p><code>richMapFunction</code></p><p>声明状态: open 方法内<code>getRuntimeContent().getState(new ValueStateDescriptor&lt;&gt;(&quot;&quot;,xxx.class))</code></p><p>读取 state: <code>xxState.value()</code> 更新 state: <code>xxState.update(v)</code></p><p>其它 state: <code>listState</code> <code>mapState</code> <code>reducingState</code>等聚合 state</p></li><li><p>state backends</p><p>本地状态管理 state 存储</p><p><code>memory</code> <code>fs</code> <code>rocksDB</code></p></li></ul><h2 id="process-api"><a class="header-anchor" href="#process-api" aria-hidden="true">#</a> process api</h2><p><code>processFunction</code> <code>keyedProcessFuction</code> <code>coProcessFunction</code> <code>processJoinFunction</code> <code>broadcastProcessFunction</code> <code>processWindowFunction</code> <code>keyedBroadcastProcessFunction</code> <code>processAllWindowFunction</code></p><p><code>process</code>注册定时器</p><h2 id="容错"><a class="header-anchor" href="#容错" aria-hidden="true">#</a> 容错</h2><pre><code>`checkpoints` `savepoints`\n</code></pre><h2 id="table-api-sql"><a class="header-anchor" href="#table-api-sql" aria-hidden="true">#</a> table api(sql)</h2><pre><code>`StreamTableEnvironment.create(env,settings)`\n</code></pre><div class="language-java"><pre><code><span class="token class-name">Table</span> t<span class="token operator">=</span>tableEnv<span class="token punctuation">.</span><span class="token function">fromDataStream</span><span class="token punctuation">(</span>xxx<span class="token punctuation">)</span><span class="token punctuation">;</span>\nt<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">&quot;id,name&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token string">&quot;id=10&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// sql</span>\ntableEnv<span class="token punctuation">.</span><span class="token function">createTemporaryView</span><span class="token punctuation">(</span><span class="token string">&quot;xxxx&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token class-name">Table</span> ts<span class="token operator">=</span>tableEnv<span class="token punctuation">.</span><span class="token function">sqlQuery</span><span class="token punctuation">(</span><span class="token string">&quot;select id from xxx where ....&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\ntableEnv<span class="token punctuation">.</span><span class="token function">toAppendStream</span><span class="token punctuation">(</span>ts<span class="token punctuation">,</span><span class="token class-name">Row</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// -------------------</span>\ntableEnv<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">createTemporaryTable</span><span class="token punctuation">(</span><span class="token string">&quot;xxx&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n\nrs<span class="token punctuation">.</span><span class="token function">insertInto</span><span class="token punctuation">(</span><span class="token string">&quot;xxxTable&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><p><code>Table</code>–&gt;<code>Catalog</code>–&gt;<code>database</code>–&gt;<code>object</code></p><ul><li>创建表</li></ul><div class="language-java"><pre><code>tableEnv<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>\n        <span class="token punctuation">.</span><span class="token function">withFormat</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token comment">// 数据格式化/解析</span>\n        <span class="token punctuation">.</span><span class="token function">wifhSchema</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token comment">//表结构</span>\n        <span class="token punctuation">.</span><span class="token function">field</span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">,</span><span class="token class-name">DataTypes</span><span class="token punctuation">.</span><span class="token function">STRING</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">field</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>\n        <span class="token punctuation">.</span><span class="token function">createTemporaryTable</span><span class="token punctuation">(</span><span class="token string">&quot;xxx&quot;</span><span class="token punctuation">)</span> <span class="token comment">// 临时表 输入/输出</span>\n</code></pre></div><ul><li>查询</li></ul><div class="language-java"><pre><code><span class="token comment">// 聚合</span>\nt<span class="token punctuation">.</span><span class="token function">groupBy</span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">&quot;id, id.count as count, age.avg as avg&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\ntableEnv<span class="token punctuation">.</span><span class="token function">sqlQuery</span><span class="token punctuation">(</span><span class="token string">&quot;select id,count(id) from xxx group by id&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><ul><li><p>输出</p><p>外部输出时模式<code>UpdateMode</code>:<code>append</code> <code>retract</code> <code>upsert</code></p></li></ul><div class="language-java"><pre><code>rs<span class="token punctuation">.</span><span class="token function">insertInto</span><span class="token punctuation">(</span><span class="token string">&quot;xxxx&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 聚合类数据需要更新模式 elasticsearch mysql redis支持</span>\n</code></pre></div><ul><li><p>table 转 dataStream: 只能<code>append</code> <code>retract</code></p></li><li><p>时间</p><p>处理时间: 增加字段<code>.proctime</code></p><p>事件时间: 原有字段<code>.rowtime</code></p></li><li><p>window</p></li></ul><div class="language-java"><pre><code>t<span class="token punctuation">.</span><span class="token function">window</span><span class="token punctuation">(</span>xxWindow as <span class="token string">&quot;w&quot;</span><span class="token punctuation">)</span>  <span class="token comment">// window别名</span>\n    <span class="token punctuation">.</span><span class="token function">groupBy</span><span class="token punctuation">(</span><span class="token string">&quot;w, id&quot;</span><span class="token punctuation">)</span> <span class="token comment">// 分组要指定window</span>\n    <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">&quot;id,id.count&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n\n<span class="token punctuation">.</span><span class="token function">window</span><span class="token punctuation">(</span><span class="token class-name">Tumble</span><span class="token punctuation">.</span><span class="token function">over</span><span class="token punctuation">(</span><span class="token string">&quot;10.minutes&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">every</span><span class="token punctuation">(</span><span class="token string">&quot;5.minutes&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;rowtime&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">as</span><span class="token punctuation">(</span><span class="token string">&quot;w&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 滚动窗口 tumble</span>\n<span class="token comment">// 滑动窗口 hop</span>\n<span class="token comment">// session窗口 session</span>\n\n<span class="token comment">// -----------over window</span>\nt<span class="token punctuation">.</span><span class="token function">window</span><span class="token punctuation">(</span>xxOverWindow as <span class="token string">&quot;w&quot;</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">&quot;id,id.count over w&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token punctuation">.</span><span class="token function">window</span><span class="token punctuation">(</span><span class="token class-name">Over</span><span class="token punctuation">.</span><span class="token function">partitionBy</span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orderBy</span><span class="token punctuation">(</span><span class="token string">&quot;proctime&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">preceding</span><span class="token punctuation">(</span>UNBOUNDED_RANGE<span class="token operator">/</span>ROW<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">as</span><span class="token punctuation">(</span><span class="token string">&quot;w&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 无界over window</span>\n<span class="token punctuation">.</span><span class="token function">window</span><span class="token punctuation">(</span><span class="token class-name">Over</span><span class="token punctuation">.</span><span class="token function">partitionBy</span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orderBy</span><span class="token punctuation">(</span><span class="token string">&quot;proctime&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">preceding</span><span class="token punctuation">(</span><span class="token string">&quot;1.minutes&quot;</span><span class="token operator">/</span><span class="token string">&quot;10.rows&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">as</span><span class="token punctuation">(</span><span class="token string">&quot;w&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 有无界over window</span>\n</code></pre></div><ul><li><p>function 函数</p><p><code>内置函数</code></p><p><code>自定义函数</code>: env 先注册 function</p><pre><code>  1. `标量函数scalarFunction` 必须有`public xxx eval()`方法 只输出单个值\n  2. `表函数TableFunction` 必须有`public void eval()`方法 可以输出多行\n  3. `聚合函数aggregateFunction` 多条输入 分组聚合后输出一个结果 `createAcumulator()` `accumulate()` `getValue()`\n  4. `表聚合函数tableAggregateFunction` 聚合输出多行多列结果 `createAcumulator()` `accumulate()` `emitValue()`\n</code></pre></li></ul><h2 id="cep"><a class="header-anchor" href="#cep" aria-hidden="true">#</a> cep</h2><p><code>复杂事件处理</code>: 输入–&gt;处理(规则匹配)–&gt;输出符合规则的事件</p><p><code>Pattern</code></p><div class="language-java"><pre><code><span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">subtype</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">followedBy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><ul><li>个体模式</li></ul><p><code>start.times(2,4).optional</code>: optional 可选 0 次 <code>.greedy</code>尽可能多的重复匹配 <code>.onemore</code>一次或多次 <code>start.timesOrMore(2).optional.greedy</code>: 0 次 2 次或多次, 尽可能多的匹配 <code>.consecutive</code> times严格相邻</p><p>条件: <code>where</code> <code>or</code> <code>until</code></p><ul><li><p>模式序列</p><p>必须以<code>begin</code>开始</p><p><code>notNext</code>: 某个事件不要近邻前一个事件</p><p><code>notFollowedBy</code>: 某个事件不要在两个事件间发生</p><p>可以指定时间范围 <code>next.withIn(3s)</code></p></li></ul><div class="language-java"><pre><code><span class="token class-name">PatternStream</span> ss<span class="token operator">=</span>CEP<span class="token punctuation">.</span><span class="token function">pattern</span><span class="token punctuation">(</span>dataStream<span class="token punctuation">,</span>pattern<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 匹配事件</span>\n<span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token function">flatSelect</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre></div>',80);p.render=function(a,t,p,e,c,l){return n(),s("div",null,[o])};export default p;export{t as __pageData};
