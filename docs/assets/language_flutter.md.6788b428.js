import{o as n,c as s,d as a}from"./app.88739142.js";const t='{"title":"Flutter","description":"","frontmatter":{},"headers":[{"level":2,"title":"Dart","slug":"dart"},{"level":3,"title":"基础语法","slug":"基础语法"},{"level":2,"title":"Flutter","slug":"flutter-1"},{"level":3,"title":"","slug":""}],"relativePath":"language/flutter.md","lastUpdated":1627291714097}',p={},e=a('<h1 id="flutter"><a class="header-anchor" href="#flutter" aria-hidden="true">#</a> Flutter</h1><p><a href="https://pub.dev/flutter" target="_blank" rel="noopener noreferrer">Flutter</a></p><h2 id="dart"><a class="header-anchor" href="#dart" aria-hidden="true">#</a> Dart</h2><h3 id="基础语法"><a class="header-anchor" href="#基础语法" aria-hidden="true">#</a> 基础语法</h3><div class="language-dart"><pre><code><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 变量定义</span>\n  <span class="token keyword">var</span> xx<span class="token operator">=</span><span class="token string">&#39;...&#39;</span><span class="token punctuation">;</span>\n  <span class="token class-name">String</span><span class="token operator">?</span> oo<span class="token operator">=</span><span class="token string">&quot;$xx $oo&quot;</span><span class="token punctuation">;</span>   <span class="token comment">// ? 可以为null</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p><code>var</code> 自动类型推断</p><p>类型: <code>String</code> <code>bool</code> <code>int</code> <code>double</code>… 常量: <code>const</code> <code>final</code></p><p><code>&#39;&#39;&#39; ...... &#39;&#39;&#39;</code> : 多行字符串</p><p>数组/集合: <code>[ ]</code> <code>&lt;String&gt;[ ]</code></p><p><code>List</code>: <code>List.filled(length,till)</code> 固定长度</p><p><code>Set</code>: <code>new Set()</code></p><p><code>Map</code>: <code>var x={&quot;key&quot;:&quot;value&quot;}</code> 或 <code>new Map()</code> 访问 <code>x[&#39;key&#39;]</code></p><p>类型判断: <code>is</code></p><p>方法:</p><p>可选参数, 默认参数 <code>String? func(String oo,[int xx=0])</code></p><p>命名参数: <code>void func( String oo,{required int xx]}</code></p><p>断言 <code>!</code> 类型不匹配抛异常</p><p>类: <code>class</code></p><div class="language-dart"><pre><code><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>\n  <span class="token class-name">String</span> name<span class="token operator">=</span><span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>\n  late int age<span class="token punctuation">;</span>  <span class="token comment">// late 延迟初始化</span>\n  int _gender<span class="token punctuation">;</span> <span class="token comment">// 私有属性 或 私有方法 加 _</span>\n\n  <span class="token comment">// 无参构造方法</span>\n  <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>name<span class="token operator">=</span><span class="token string">&quot;xx&quot;</span><span class="token punctuation">,</span>age<span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">{</span>\n\n  <span class="token punctuation">}</span>\n\n  <span class="token comment">// 带参构造方法</span>\n  <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span>int age<span class="token punctuation">)</span><span class="token punctuation">{</span>\n\n  <span class="token punctuation">}</span>\n\n  <span class="token comment">// 简写</span>\n  <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token comment">// 匿名构造方法</span>\n  <span class="token class-name">Person</span><span class="token punctuation">.</span><span class="token function">xx</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n\n  <span class="token punctuation">}</span>\n\n  <span class="token comment">// getter</span>\n  <span class="token keyword">get</span> oo<span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token string">&quot;gettter&quot;</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token comment">// setter   p.xxxx=20</span>\n  <span class="token keyword">set</span> <span class="token function">xxxx</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token operator">=</span>v<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>继承 <code>extends</code></p><div class="language-dart"><pre><code><span class="token keyword">class</span> <span class="token class-name">T</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>\n  <span class="token class-name">T</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span>int age<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">xx</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">)</span><span class="token punctuation">{</span>\n\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>抽象类/接口 <code>abstract</code> dart 没有专门的 interface</p><p><code>mixins</code>: <code>class A with B,C</code></p><p>泛型: 和 java 差不多</p><p>内置库: <code>import dart:....</code> 部分引入 <code>import .... show/hide xxx</code></p><p><code>factory</code> 工厂构造方法</p><div class="language-dart"><pre><code><span class="token keyword">class</span> <span class="token class-name">Logger</span> <span class="token punctuation">{</span>\n  <span class="token keyword">final</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>\n  bool mute <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n\n  <span class="token comment">// _cache is library-private, thanks to</span>\n  <span class="token comment">// the _ in front of its name.</span>\n  <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Logger</span><span class="token punctuation">&gt;</span></span> _cache <span class="token operator">=</span>\n      <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Logger</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">factory</span> <span class="token class-name">Logger</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> _cache<span class="token punctuation">.</span><span class="token function">putIfAbsent</span><span class="token punctuation">(</span>\n        name<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token class-name">Logger</span><span class="token punctuation">.</span><span class="token function">_internal</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token class-name">Logger</span><span class="token punctuation">.</span><span class="token function">_internal</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">void</span> <span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">String</span> msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>mute<span class="token punctuation">)</span> <span class="token function">print</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">var</span> logger <span class="token operator">=</span> <span class="token class-name">Logger</span><span class="token punctuation">(</span><span class="token string">&#39;UI&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nlogger<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Button clicked&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><h2 id="flutter-1"><a class="header-anchor" href="#flutter-1" aria-hidden="true">#</a> Flutter</h2><h3 id=""><a class="header-anchor" href="#" aria-hidden="true">#</a></h3><p><code>StatelessWidget</code> <code>StatefullWidget</code></p><div class="language-dart"><pre><code><span class="token class-name">ListView</span>\n<span class="token class-name">GridView</span>\n<span class="token class-name">Row</span> <span class="token class-name">Column</span> <span class="token class-name">Stack</span> <span class="token class-name">Positioned</span> <span class="token class-name">Card</span>\n<span class="token class-name">Navigator</span>\n</code></pre></div>',31);p.render=function(a,t,p,o,c,l){return n(),s("div",null,[e])};export default p;export{t as __pageData};
